
GMK_Joystick_2.0_XPD_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800705c  0800705c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007064  08007064  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007064  08007064  00017064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800706c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000064  080070d0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  080070d0  0002077c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e4f  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000420f  00000000  00000000  00038edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0003d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000178c0  00000000  00000000  0003e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016b12  00000000  00000000  000559e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00088062  00000000  00000000  0006c4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000f455c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e90  00000000  00000000  000f45b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004274  00000000  00000000  000f5440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000064 	.word	0x20000064
 8000158:	00000000 	.word	0x00000000
 800015c:	08006f38 	.word	0x08006f38

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000068 	.word	0x20000068
 8000178:	08006f38 	.word	0x08006f38

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <USB_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void USB_FS_MspInit(void* handle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ac4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ac8:	6018      	str	r0, [r3, #0]
	PCD_HandleTypeDef hpcd_USB_FS;

	hpcd_USB_FS.Instance = USB;
 8000aca:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ace:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000ad2:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <USB_FS_MspInit+0xc8>)
 8000ad4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ad6:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ada:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000ade:	2208      	movs	r2, #8
 8000ae0:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ae2:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ae6:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000aea:	2202      	movs	r2, #2
 8000aec:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aee:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000af2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000af6:	2202      	movs	r2, #2
 8000af8:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000afa:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000afe:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b06:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000b0a:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
	HAL_PCD_Init(&hpcd_USB_FS);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 f99b 	bl	8002e52 <HAL_PCD_Init>

	__HAL_RCC_USB_CLK_ENABLE();
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <USB_FS_MspInit+0xcc>)
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <USB_FS_MspInit+0xcc>)
 8000b22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b26:	6253      	str	r3, [r2, #36]	; 0x24
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <USB_FS_MspInit+0xcc>)
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8000b30:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000b34:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000b3e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000b42:	681b      	ldr	r3, [r3, #0]

	/* Peripheral interrupt init */
	HAL_NVIC_SetPriority(USB_HP_IRQn, 1, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	2013      	movs	r0, #19
 8000b4a:	f001 fe10 	bl	800276e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8000b4e:	2013      	movs	r0, #19
 8000b50:	f001 fe29 	bl	80027a6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	2014      	movs	r0, #20
 8000b5a:	f001 fe08 	bl	800276e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000b5e:	2014      	movs	r0, #20
 8000b60:	f001 fe21 	bl	80027a6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USB_FS_WKUP_IRQn, 1, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2101      	movs	r1, #1
 8000b68:	202a      	movs	r0, #42	; 0x2a
 8000b6a:	f001 fe00 	bl	800276e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_FS_WKUP_IRQn);
 8000b6e:	202a      	movs	r0, #42	; 0x2a
 8000b70:	f001 fe19 	bl	80027a6 <HAL_NVIC_EnableIRQ>
}
 8000b74:	bf00      	nop
 8000b76:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40005c00 	.word	0x40005c00
 8000b84:	40023800 	.word	0x40023800

08000b88 <USB_FS_MspDeInit>:

void USB_FS_MspDeInit(void* handle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_USB_CLK_DISABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <USB_FS_MspDeInit+0x38>)
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <USB_FS_MspDeInit+0x38>)
 8000b96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b9a:	6253      	str	r3, [r2, #36]	; 0x24

	/* Peripheral interrupt Deinit*/
	HAL_NVIC_DisableIRQ(USB_HP_IRQn);
 8000b9c:	2013      	movs	r0, #19
 8000b9e:	f001 fe10 	bl	80027c2 <HAL_NVIC_DisableIRQ>

	HAL_NVIC_DisableIRQ(USB_LP_IRQn);
 8000ba2:	2014      	movs	r0, #20
 8000ba4:	f001 fe0d 	bl	80027c2 <HAL_NVIC_DisableIRQ>

	HAL_NVIC_SetPriority(USB_FS_WKUP_IRQn, 1, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	202a      	movs	r0, #42	; 0x2a
 8000bae:	f001 fdde 	bl	800276e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_FS_WKUP_IRQn);
 8000bb2:	202a      	movs	r0, #42	; 0x2a
 8000bb4:	f001 fdf7 	bl	80027a6 <HAL_NVIC_EnableIRQ>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB);
    UsbDevice->Callbacks.DepInit = USB_FS_MspInit;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_USBD_Setup+0x1c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <HAL_USBD_Setup+0x20>)
 8000bce:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepDeinit = USB_FS_MspDeInit;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_USBD_Setup+0x1c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_USBD_Setup+0x24>)
 8000bd6:	611a      	str	r2, [r3, #16]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	08007004 	.word	0x08007004
 8000be4:	08000ab9 	.word	0x08000ab9
 8000be8:	08000b89 	.word	0x08000b89

08000bec <USB_HP_IRQHandler>:

	USB_vIRQHandler(UsbDevice);
}

void USB_HP_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

	USB_vIRQHandler(UsbDevice);
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <USB_HP_IRQHandler+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 fec9 	bl	800698c <USB_vIRQHandler>

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	08007004 	.word	0x08007004

08000c04 <USB_LP_IRQHandler>:

void USB_LP_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

	USB_vIRQHandler(UsbDevice);
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <USB_LP_IRQHandler+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f005 febd 	bl	800698c <USB_vIRQHandler>

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08007004 	.word	0x08007004

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b096      	sub	sp, #88	; 0x58
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 ff18 	bl	8001a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f99b 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 fb1d 	bl	8001268 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2e:	f000 fafd 	bl	800122c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c32:	f000 fa4d 	bl	80010d0 <MX_TIM2_Init>
  MX_ADC_Init();
 8000c36:	f000 f9e3 	bl	8001000 <MX_ADC_Init>
  MX_USB_PCD_Init();
 8000c3a:	f000 fad5 	bl	80011e8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_USBD_Setup();
 8000c3e:	f7ff ffc1 	bl	8000bc4 <HAL_USBD_Setup>
  UsbDevice_Init();
 8000c42:	f000 fcc3 	bl	80015cc <UsbDevice_Init>

  HAL_TIM_Base_Start(&htim2);
 8000c46:	48a3      	ldr	r0, [pc, #652]	; (8000ed4 <main+0x2b8>)
 8000c48:	f002 ffe6 	bl	8003c18 <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	48a1      	ldr	r0, [pc, #644]	; (8000ed4 <main+0x2b8>)
 8000c50:	f003 f874 	bl	8003d3c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000c54:	2104      	movs	r1, #4
 8000c56:	489f      	ldr	r0, [pc, #636]	; (8000ed4 <main+0x2b8>)
 8000c58:	f003 f870 	bl	8003d3c <HAL_TIM_OC_Start_IT>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000c5c:	4c9e      	ldr	r4, [pc, #632]	; (8000ed8 <main+0x2bc>)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4a9e      	ldr	r2, [pc, #632]	; (8000edc <main+0x2c0>)
 8000c62:	499f      	ldr	r1, [pc, #636]	; (8000ee0 <main+0x2c4>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fd49 	bl	80016fc <Joystick_Init>
 8000c6a:	4625      	mov	r5, r4
 8000c6c:	463c      	mov	r4, r7
 8000c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c7a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  failed_tx = 0;
 8000c82:	4b98      	ldr	r3, [pc, #608]	; (8000ee4 <main+0x2c8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	801a      	strh	r2, [r3, #0]
  failed_tx_max = 0;
 8000c88:	4b97      	ldr	r3, [pc, #604]	; (8000ee8 <main+0x2cc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	801a      	strh	r2, [r3, #0]
  failed_tx_avg = 0;
 8000c8e:	4b97      	ldr	r3, [pc, #604]	; (8000eec <main+0x2d0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000c9a:	e009      	b.n	8000cb0 <main+0x94>
  	  event_state[i] = EVENT_WAIT;
 8000c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ca0:	4a93      	ldr	r2, [pc, #588]	; (8000ef0 <main+0x2d4>)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000caa:	3301      	adds	r3, #1
 8000cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000cb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	daf1      	bge.n	8000c9c <main+0x80>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000cb8:	4b8e      	ldr	r3, [pc, #568]	; (8000ef4 <main+0x2d8>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b8c      	ldr	r3, [pc, #560]	; (8000ef0 <main+0x2d4>)
 8000cc0:	5c9b      	ldrb	r3, [r3, r2]
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	f200 80f1 	bhi.w	8000eaa <main+0x28e>
 8000cc8:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <main+0xb4>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000ce5 	.word	0x08000ce5
 8000cd4:	08000d01 	.word	0x08000d01
 8000cd8:	08000d0d 	.word	0x08000d0d
 8000cdc:	08000d15 	.word	0x08000d15
 8000ce0:	08000e9f 	.word	0x08000e9f
		case EVENT_WAIT:
			controller.buttons.a = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4884      	ldr	r0, [pc, #528]	; (8000ef8 <main+0x2dc>)
 8000ce8:	f002 f89c 	bl	8002e24 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	b2d9      	uxtb	r1, r3
 8000cf4:	4a81      	ldr	r2, [pc, #516]	; (8000efc <main+0x2e0>)
 8000cf6:	7853      	ldrb	r3, [r2, #1]
 8000cf8:	f361 1304 	bfi	r3, r1, #4, #1
 8000cfc:	7053      	strb	r3, [r2, #1]
			break;
 8000cfe:	e0d4      	b.n	8000eaa <main+0x28e>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000d00:	2202      	movs	r2, #2
 8000d02:	4977      	ldr	r1, [pc, #476]	; (8000ee0 <main+0x2c4>)
 8000d04:	487e      	ldr	r0, [pc, #504]	; (8000f00 <main+0x2e4>)
 8000d06:	f001 f85b 	bl	8001dc0 <HAL_ADC_Start_DMA>
			break;
 8000d0a:	e0ce      	b.n	8000eaa <main+0x28e>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000d0c:	2004      	movs	r0, #4
 8000d0e:	f000 fae3 	bl	80012d8 <write_next_event_state>
			break;
 8000d12:	e0ca      	b.n	8000eaa <main+0x28e>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000d14:	4870      	ldr	r0, [pc, #448]	; (8000ed8 <main+0x2bc>)
 8000d16:	f000 fd3d 	bl	8001794 <Joystick_Update>
			uint8_t invert_x = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000d26:	4b77      	ldr	r3, [pc, #476]	; (8000f04 <main+0x2e8>)
 8000d28:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000d2a:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <main+0x2e8>)
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000d2e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <main+0x124>
 8000d36:	4b68      	ldr	r3, [pc, #416]	; (8000ed8 <main+0x2bc>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d3e:	e001      	b.n	8000d44 <main+0x128>
 8000d40:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <main+0x2bc>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000d46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d004      	beq.n	8000d58 <main+0x13c>
 8000d4e:	4b62      	ldr	r3, [pc, #392]	; (8000ed8 <main+0x2bc>)
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d56:	e001      	b.n	8000d5c <main+0x140>
 8000d58:	4b5f      	ldr	r3, [pc, #380]	; (8000ed8 <main+0x2bc>)
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <main+0x2e0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000d64:	4b65      	ldr	r3, [pc, #404]	; (8000efc <main+0x2e0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000d6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000d6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d6e:	f7ff fccf 	bl	8000710 <__aeabi_fcmpgt>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <main+0x170>
 8000d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d7e:	4619      	mov	r1, r3
 8000d80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d82:	f7ff fca7 	bl	80006d4 <__aeabi_fcmplt>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <main+0x198>
				controller.joysticks._bits[1] += (int16_t)(val_x * -(float)INT16_MAX);
 8000d8c:	4b5b      	ldr	r3, [pc, #364]	; (8000efc <main+0x2e0>)
 8000d8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	495c      	ldr	r1, [pc, #368]	; (8000f08 <main+0x2ec>)
 8000d96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d98:	f7ff fafe 	bl	8000398 <__aeabi_fmul>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fcc0 	bl	8000724 <__aeabi_f2iz>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	4423      	add	r3, r4
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	4b52      	ldr	r3, [pc, #328]	; (8000efc <main+0x2e0>)
 8000db2:	809a      	strh	r2, [r3, #4]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000db4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000db6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000db8:	f7ff fcaa 	bl	8000710 <__aeabi_fcmpgt>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <main+0x1ba>
 8000dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000dcc:	f7ff fc82 	bl	80006d4 <__aeabi_fcmplt>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d013      	beq.n	8000dfe <main+0x1e2>
				controller.joysticks._bits[0] += (int16_t)(val_y * (float)INT16_MAX);
 8000dd6:	4b49      	ldr	r3, [pc, #292]	; (8000efc <main+0x2e0>)
 8000dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ddc:	b29c      	uxth	r4, r3
 8000dde:	494b      	ldr	r1, [pc, #300]	; (8000f0c <main+0x2f0>)
 8000de0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000de2:	f7ff fad9 	bl	8000398 <__aeabi_fmul>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fc9b 	bl	8000724 <__aeabi_f2iz>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4423      	add	r3, r4
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <main+0x2e0>)
 8000dfc:	805a      	strh	r2, [r3, #2]
			}
			hid_output_data.report_id = 1;
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <main+0x2f4>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
			hid_output_data.buttons[0] = lowByte(controller.buttons._bits);
 8000e04:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <main+0x2e0>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <main+0x2f4>)
 8000e0c:	705a      	strb	r2, [r3, #1]
			hid_output_data.buttons[1] = highByte(controller.buttons._bits);
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <main+0x2e0>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <main+0x2f4>)
 8000e1a:	709a      	strb	r2, [r3, #2]
			hid_output_data.joysticks[0] = lowByte(controller.joysticks.left.x);
 8000e1c:	4b37      	ldr	r3, [pc, #220]	; (8000efc <main+0x2e0>)
 8000e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <main+0x2f4>)
 8000e26:	70da      	strb	r2, [r3, #3]
			hid_output_data.joysticks[1] = highByte(controller.joysticks.left.x);
 8000e28:	4b34      	ldr	r3, [pc, #208]	; (8000efc <main+0x2e0>)
 8000e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e2e:	121b      	asrs	r3, r3, #8
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <main+0x2f4>)
 8000e36:	711a      	strb	r2, [r3, #4]
			hid_output_data.joysticks[2] = lowByte(controller.joysticks.left.y);
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <main+0x2e0>)
 8000e3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <main+0x2f4>)
 8000e42:	715a      	strb	r2, [r3, #5]
			hid_output_data.joysticks[3] = highByte(controller.joysticks.left.y);
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <main+0x2e0>)
 8000e46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e4a:	121b      	asrs	r3, r3, #8
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <main+0x2f4>)
 8000e52:	719a      	strb	r2, [r3, #6]
			hid_output_data.joysticks[4] = lowByte(controller.joysticks.right.x);
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <main+0x2e0>)
 8000e56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <main+0x2f4>)
 8000e5e:	71da      	strb	r2, [r3, #7]
			hid_output_data.joysticks[5] = highByte(controller.joysticks.right.x);
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <main+0x2e0>)
 8000e62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e66:	121b      	asrs	r3, r3, #8
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <main+0x2f4>)
 8000e6e:	721a      	strb	r2, [r3, #8]
			hid_output_data.joysticks[6] = lowByte(controller.joysticks.right.y);
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <main+0x2e0>)
 8000e72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <main+0x2f4>)
 8000e7a:	725a      	strb	r2, [r3, #9]
			hid_output_data.joysticks[7] = highByte(controller.joysticks.right.y);
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <main+0x2e0>)
 8000e7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e82:	121b      	asrs	r3, r3, #8
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <main+0x2f4>)
 8000e8a:	729a      	strb	r2, [r3, #10]
			hid_output_data.triggers[0] = controller.triggers.left;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <main+0x2e0>)
 8000e8e:	7a9a      	ldrb	r2, [r3, #10]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <main+0x2f4>)
 8000e92:	72da      	strb	r2, [r3, #11]
			hid_output_data.triggers[1] = controller.triggers.right;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <main+0x2e0>)
 8000e96:	7ada      	ldrb	r2, [r3, #11]
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <main+0x2f4>)
 8000e9a:	731a      	strb	r2, [r3, #12]
			break;
 8000e9c:	e005      	b.n	8000eaa <main+0x28e>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			USBD_HID_ReportIn(&_gmk_controller_if, &hid_output_data, sizeof(hid_output_data));
 8000e9e:	220d      	movs	r2, #13
 8000ea0:	491b      	ldr	r1, [pc, #108]	; (8000f10 <main+0x2f4>)
 8000ea2:	481c      	ldr	r0, [pc, #112]	; (8000f14 <main+0x2f8>)
 8000ea4:	f003 ff5a 	bl	8004d5c <USBD_HID_ReportIn>
			break;
 8000ea8:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <main+0x2d8>)
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <main+0x2fc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d032      	beq.n	8000f1c <main+0x300>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <main+0x2d8>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	425a      	negs	r2, r3
 8000ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ec6:	bf58      	it	pl
 8000ec8:	4253      	negpl	r3, r2
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <main+0x2d8>)
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e027      	b.n	8000f22 <main+0x306>
 8000ed2:	bf00      	nop
 8000ed4:	20000118 	.word	0x20000118
 8000ed8:	200004d4 	.word	0x200004d4
 8000edc:	200004d2 	.word	0x200004d2
 8000ee0:	200004d0 	.word	0x200004d0
 8000ee4:	20000444 	.word	0x20000444
 8000ee8:	20000446 	.word	0x20000446
 8000eec:	20000448 	.word	0x20000448
 8000ef0:	2000044c 	.word	0x2000044c
 8000ef4:	200004cc 	.word	0x200004cc
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	20000510 	.word	0x20000510
 8000f00:	20000080 	.word	0x20000080
 8000f04:	3d4ccccd 	.word	0x3d4ccccd
 8000f08:	c6fffe00 	.word	0xc6fffe00
 8000f0c:	46fffe00 	.word	0x46fffe00
 8000f10:	2000051c 	.word	0x2000051c
 8000f14:	20000044 	.word	0x20000044
 8000f18:	200004cd 	.word	0x200004cd
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f9db 	bl	80012d8 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <main+0x338>)
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <main+0x33c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d306      	bcc.n	8000f3c <main+0x320>
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <main+0x338>)
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <main+0x33c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	e007      	b.n	8000f4c <main+0x330>
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <main+0x338>)
 8000f3e:	781a      	ldrb	r2, [r3, #0]
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <main+0x33c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <main+0x340>)
 8000f4e:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000f50:	e6b2      	b.n	8000cb8 <main+0x9c>
 8000f52:	bf00      	nop
 8000f54:	200004cd 	.word	0x200004cd
 8000f58:	200004cc 	.word	0x200004cc
 8000f5c:	200004ce 	.word	0x200004ce

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b092      	sub	sp, #72	; 0x48
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	2234      	movs	r2, #52	; 0x34
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 ffda 	bl	8006f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <SystemClock_Config+0x9c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <SystemClock_Config+0x9c>)
 8000f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f90:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f92:	2303      	movs	r3, #3
 8000f94:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000fac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000fb2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 f827 	bl	8003010 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000fc8:	f000 f9ca 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fb43 	bl	8003670 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff0:	f000 f9b6 	bl	8001360 <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3748      	adds	r7, #72	; 0x48
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <MX_ADC_Init+0xcc>)
 8001014:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_ADC_Init+0xc8>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <MX_ADC_Init+0xc8>)
 800102a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_ADC_Init+0xc8>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC_Init+0xc8>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001052:	2202      	movs	r2, #2
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001060:	2210      	movs	r2, #16
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC_Init+0xc8>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001072:	4815      	ldr	r0, [pc, #84]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001074:	f000 fd5e 	bl	8001b34 <HAL_ADC_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 800107e:	f000 f96f 	bl	8001360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001086:	2301      	movs	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_9CYCLES;
 800108a:	2301      	movs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_ADC_Init+0xc8>)
 8001094:	f001 f83e 	bl	8002114 <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 800109e:	f000 f95f 	bl	8001360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_ADC_Init+0xc8>)
 80010b0:	f001 f830 	bl	8002114 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80010ba:	f000 f951 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000080 	.word	0x20000080
 80010cc:	40012400 	.word	0x40012400

080010d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <MX_TIM2_Init+0x114>)
 80010fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001100:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <MX_TIM2_Init+0x114>)
 8001104:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001108:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <MX_TIM2_Init+0x114>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <MX_TIM2_Init+0x114>)
 8001112:	221f      	movs	r2, #31
 8001114:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <MX_TIM2_Init+0x114>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <MX_TIM2_Init+0x114>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001122:	4830      	ldr	r0, [pc, #192]	; (80011e4 <MX_TIM2_Init+0x114>)
 8001124:	f002 fd38 	bl	8003b98 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800112e:	f000 f917 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4619      	mov	r1, r3
 800113e:	4829      	ldr	r0, [pc, #164]	; (80011e4 <MX_TIM2_Init+0x114>)
 8001140:	f003 f80c 	bl	800415c <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800114a:	f000 f909 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <MX_TIM2_Init+0x114>)
 8001150:	f002 fdac 	bl	8003cac <HAL_TIM_OC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800115a:	f000 f901 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	481d      	ldr	r0, [pc, #116]	; (80011e4 <MX_TIM2_Init+0x114>)
 800116e:	f003 faef 	bl	8004750 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001178:	f000 f8f2 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800117c:	2310      	movs	r3, #16
 800117e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16-1;
 8001180:	230f      	movs	r3, #15
 8001182:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_TIM2_Init+0x114>)
 8001194:	f002 ff8a 	bl	80040ac <HAL_TIM_OC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800119e:	f000 f8df 	bl	8001360 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_TIM2_Init+0x114>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_TIM2_Init+0x114>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0208 	orr.w	r2, r2, #8
 80011b0:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32-1;
 80011b2:	231f      	movs	r3, #31
 80011b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	2204      	movs	r2, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_TIM2_Init+0x114>)
 80011be:	f002 ff75 	bl	80040ac <HAL_TIM_OC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80011c8:	f000 f8ca 	bl	8001360 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <MX_TIM2_Init+0x114>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <MX_TIM2_Init+0x114>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000118 	.word	0x20000118

080011e8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_USB_PCD_Init+0x3c>)
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <MX_USB_PCD_Init+0x40>)
 80011f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USB_PCD_Init+0x3c>)
 80011f4:	2208      	movs	r2, #8
 80011f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_USB_PCD_Init+0x3c>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USB_PCD_Init+0x3c>)
 8001200:	2202      	movs	r2, #2
 8001202:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_USB_PCD_Init+0x3c>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USB_PCD_Init+0x3c>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_USB_PCD_Init+0x3c>)
 8001212:	f001 fe1e 	bl	8002e52 <HAL_PCD_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800121c:	f000 f8a0 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000158 	.word	0x20000158
 8001228:	40005c00 	.word	0x40005c00

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_DMA_Init+0x38>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <MX_DMA_Init+0x38>)
 8001238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_DMA_Init+0x38>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	200b      	movs	r0, #11
 8001250:	f001 fa8d 	bl	800276e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001254:	200b      	movs	r0, #11
 8001256:	f001 faa6 	bl	80027a6 <HAL_NVIC_EnableIRQ>

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_GPIO_Init+0x68>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <MX_GPIO_Init+0x68>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_GPIO_Init+0x68>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_GPIO_Init+0x68>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <MX_GPIO_Init+0x68>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_GPIO_Init+0x68>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 80012ae:	2304      	movs	r3, #4
 80012b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_GPIO_Init+0x6c>)
 80012c2:	f001 fc2f 	bl	8002b24 <HAL_GPIO_Init>

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000

080012d8 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <write_next_event_state+0x3c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	425a      	negs	r2, r3
 80012ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012f2:	bf58      	it	pl
 80012f4:	4253      	negpl	r3, r2
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <write_next_event_state+0x3c>)
 80012fa:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <write_next_event_state+0x3c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <write_next_event_state+0x40>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	5453      	strb	r3, [r2, r1]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200004cd 	.word	0x200004cd
 8001318:	2000044c 	.word	0x2000044c

0800131c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7e1b      	ldrb	r3, [r3, #24]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <HAL_TIM_OC_DelayElapsedCallback+0x16>
 800132c:	2b02      	cmp	r3, #2
 800132e:	d004      	beq.n	800133a <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 8001330:	e007      	b.n	8001342 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff ffd0 	bl	80012d8 <write_next_event_state>
			break;
 8001338:	e003      	b.n	8001342 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 800133a:	2002      	movs	r0, #2
 800133c:	f7ff ffcc 	bl	80012d8 <write_next_event_state>
			break;
 8001340:	bf00      	nop
	}
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 8001352:	2003      	movs	r0, #3
 8001354:	f7ff ffc0 	bl	80012d8 <write_next_event_state>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	e7fe      	b.n	8001368 <Error_Handler+0x8>
	...

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_MspInit+0x58>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <HAL_MspInit+0x58>)
 8001378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800137c:	6253      	str	r3, [r2, #36]	; 0x24
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_MspInit+0x58>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_MspInit+0x58>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_MspInit+0x58>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_MspInit+0x58>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_MspInit+0x58>)
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_MspInit+0x58>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6253      	str	r3, [r2, #36]	; 0x24
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_MspInit+0x58>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40023800 	.word	0x40023800

080013c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2d      	ldr	r2, [pc, #180]	; (800149c <HAL_ADC_MspInit+0xd4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d154      	bne.n	8001494 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_ADC_MspInit+0xd8>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a2c      	ldr	r2, [pc, #176]	; (80014a0 <HAL_ADC_MspInit+0xd8>)
 80013f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f4:	6213      	str	r3, [r2, #32]
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_ADC_MspInit+0xd8>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_ADC_MspInit+0xd8>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <HAL_ADC_MspInit+0xd8>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_ADC_MspInit+0xd8>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800141a:	2303      	movs	r3, #3
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	481d      	ldr	r0, [pc, #116]	; (80014a4 <HAL_ADC_MspInit+0xdc>)
 800142e:	f001 fb79 	bl	8002b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_ADC_MspInit+0xe4>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 8001454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001458:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 8001462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001466:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 800146a:	f001 f9c5 	bl	80027f8 <HAL_DMA_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001474:	f7ff ff74 	bl	8001360 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_ADC_MspInit+0xe0>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2012      	movs	r0, #18
 800148a:	f001 f970 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800148e:	2012      	movs	r0, #18
 8001490:	f001 f989 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40012400 	.word	0x40012400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	200000d4 	.word	0x200000d4
 80014ac:	40026008 	.word	0x40026008

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d113      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_TIM_Base_MspInit+0x44>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6253      	str	r3, [r2, #36]	; 0x24
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_TIM_Base_MspInit+0x44>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201c      	movs	r0, #28
 80014e0:	f001 f945 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e4:	201c      	movs	r0, #28
 80014e6:	f001 f95e 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_PCD_MspInit+0x34>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10b      	bne.n	8001522 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_PCD_MspInit+0x38>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_PCD_MspInit+0x38>)
 8001510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001514:	6253      	str	r3, [r2, #36]	; 0x24
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_PCD_MspInit+0x38>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40005c00 	.word	0x40005c00
 8001530:	40023800 	.word	0x40023800

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157a:	f000 fabf 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA1_Channel1_IRQHandler+0x10>)
 800158a:	f001 f9ed 	bl	8002968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200000d4 	.word	0x200000d4

08001598 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <ADC1_IRQHandler+0x10>)
 800159e:	f000 fc9d 	bl	8001edc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000080 	.word	0x20000080

080015ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <TIM2_IRQHandler+0x10>)
 80015b2:	f002 fc9f 	bl	8003ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000118 	.word	0x20000118

080015c0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <UsbDevice_Init>:
USBD_HandleType hUsbDevice, *const UsbDevice = &hUsbDevice;

extern USBD_HID_IfHandleType *const gmk_controller_if;

void UsbDevice_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	Get_SerialNum((uint8_t*)&serial_number);
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <UsbDevice_Init+0x38>)
 80015d2:	f000 f81f 	bl	8001614 <Get_SerialNum>

	//dev_cfg->SerialNumber = &serial_number;

    /* Configure HID controller */
    gmk_controller_if->Config.InEpNum = 0x81;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <UsbDevice_Init+0x3c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2281      	movs	r2, #129	; 0x81
 80015dc:	741a      	strb	r2, [r3, #16]

    /* Initialize the device */
    USBD_Init(UsbDevice, dev_cfg);
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <UsbDevice_Init+0x40>)
 80015e0:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <UsbDevice_Init+0x44>)
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fbed 	bl	8004dc4 <USBD_Init>

    /* Mount the interfaces to the device */
    USBD_HID_MountInterface(gmk_controller_if, UsbDevice);
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <UsbDevice_Init+0x3c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <UsbDevice_Init+0x40>)
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fb64 	bl	8004cc0 <USBD_HID_MountInterface>

    /* The device connection can be made */
    USBD_Connect(UsbDevice);
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <UsbDevice_Init+0x40>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fc13 	bl	8004e26 <USBD_Connect>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000052c 	.word	0x2000052c
 8001608:	08006fc8 	.word	0x08006fc8
 800160c:	20000544 	.word	0x20000544
 8001610:	08006fe8 	.word	0x08006fe8

08001614 <Get_SerialNum>:
{
	USBD_DeInit(UsbDevice);
}

static void Get_SerialNum(uint8_t* pbuf)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <Get_SerialNum+0x50>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	617b      	str	r3, [r7, #20]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <Get_SerialNum+0x54>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <Get_SerialNum+0x58>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]

  deviceserial0 += deviceserial2;
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	617b      	str	r3, [r7, #20]

  if (deviceserial0 != 0)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00f      	beq.n	800165c <Get_SerialNum+0x48>
  {
	  splitIntegerUsingBitShifting(deviceserial0, &pbuf[0]);
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f000 f816 	bl	8001670 <splitIntegerUsingBitShifting>
	  splitIntegerUsingBitShifting(deviceserial1, &pbuf[4]);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3304      	adds	r3, #4
 8001648:	4619      	mov	r1, r3
 800164a:	6938      	ldr	r0, [r7, #16]
 800164c:	f000 f810 	bl	8001670 <splitIntegerUsingBitShifting>
	  splitIntegerUsingBitShifting(deviceserial2, &pbuf[8]);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3308      	adds	r3, #8
 8001654:	4619      	mov	r1, r3
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f80a 	bl	8001670 <splitIntegerUsingBitShifting>
  }
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	1ff80050 	.word	0x1ff80050
 8001668:	1ff80054 	.word	0x1ff80054
 800166c:	1ff80058 	.word	0x1ff80058

08001670 <splitIntegerUsingBitShifting>:

void splitIntegerUsingBitShifting(uint32_t value, uint8_t* result)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    result[0] = (value >> 24) & 0xFF;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0e1b      	lsrs	r3, r3, #24
 800167e:	b2da      	uxtb	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	701a      	strb	r2, [r3, #0]
    result[1] = (value >> 16) & 0xFF;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	0c1a      	lsrs	r2, r3, #16
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]
    result[2] = (value >> 8) & 0xFF;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	0a1a      	lsrs	r2, r3, #8
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3302      	adds	r3, #2
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	701a      	strb	r2, [r3, #0]
    result[3] = value & 0xFF;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3303      	adds	r3, #3
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	; (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016d6:	f7ff ff73 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f005 fc01 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7ff fa9d 	bl	8000c1c <main>
  bx lr
 80016e2:	4770      	bx	lr
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016ec:	0800706c 	.word	0x0800706c
  ldr r2, =_sbss
 80016f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016f4:	2000077c 	.word	0x2000077c

080016f8 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <COMP_IRQHandler>
	...

080016fc <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 80016fc:	b4b0      	push	{r4, r5, r7}
 80016fe:	b095      	sub	sp, #84	; 0x54
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 800170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001710:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 8001712:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001716:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <Joystick_Init+0x90>)
 800171e:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <Joystick_Init+0x94>)
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 800172e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001732:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 8001734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001738:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <Joystick_Init+0x90>)
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <Joystick_Init+0x94>)
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 800175e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	461d      	mov	r5, r3
 8001768:	f107 0414 	add.w	r4, r7, #20
 800176c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800177c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	3754      	adds	r7, #84	; 0x54
 8001784:	46bd      	mov	sp, r7
 8001786:	bcb0      	pop	{r4, r5, r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	3ccccccd 	.word	0x3ccccccd
 8001790:	3f8ccccd 	.word	0x3f8ccccd

08001794 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d062      	beq.n	800187c <Joystick_Update+0xe8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d05e      	beq.n	800187c <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fd90 	bl	80002e8 <__aeabi_ui2f>
 80017c8:	4604      	mov	r4, r0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80017d4:	f7fe fcd6 	bl	8000184 <__aeabi_fsub>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	4620      	mov	r0, r4
 80017de:	f7fe fddb 	bl	8000398 <__aeabi_fmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461c      	mov	r4, r3
 80017e6:	8bfb      	ldrh	r3, [r7, #30]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fd7d 	bl	80002e8 <__aeabi_ui2f>
 80017ee:	4602      	mov	r2, r0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7fe fdce 	bl	8000398 <__aeabi_fmul>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4619      	mov	r1, r3
 8001800:	4620      	mov	r0, r4
 8001802:	f7fe fcc1 	bl	8000188 <__addsf3>
 8001806:	4603      	mov	r3, r0
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe ffb1 	bl	8000770 <__aeabi_f2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	8c1b      	ldrh	r3, [r3, #32]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fd64 	bl	80002e8 <__aeabi_ui2f>
 8001820:	4604      	mov	r4, r0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800182c:	f7fe fcaa 	bl	8000184 <__aeabi_fsub>
 8001830:	4603      	mov	r3, r0
 8001832:	4619      	mov	r1, r3
 8001834:	4620      	mov	r0, r4
 8001836:	f7fe fdaf 	bl	8000398 <__aeabi_fmul>
 800183a:	4603      	mov	r3, r0
 800183c:	461c      	mov	r4, r3
 800183e:	8bbb      	ldrh	r3, [r7, #28]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fd51 	bl	80002e8 <__aeabi_ui2f>
 8001846:	4602      	mov	r2, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7fe fda2 	bl	8000398 <__aeabi_fmul>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	4620      	mov	r0, r4
 800185a:	f7fe fc95 	bl	8000188 <__addsf3>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe ff85 	bl	8000770 <__aeabi_f2uiz>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	865a      	strh	r2, [r3, #50]	; 0x32
 800187a:	e008      	b.n	800188e <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	891b      	ldrh	r3, [r3, #8]
 8001892:	8bfa      	ldrh	r2, [r7, #30]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b29b      	uxth	r3, r3
 8001898:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	8c1b      	ldrh	r3, [r3, #32]
 800189e:	8bba      	ldrh	r2, [r7, #28]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	889b      	ldrh	r3, [r3, #4]
 80018aa:	8bfa      	ldrh	r2, [r7, #30]
 80018ac:	4293      	cmp	r3, r2
 80018ae:	bf28      	it	cs
 80018b0:	4613      	movcs	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	88db      	ldrh	r3, [r3, #6]
 80018bc:	8bfa      	ldrh	r2, [r7, #30]
 80018be:	4293      	cmp	r3, r2
 80018c0:	bf38      	it	cc
 80018c2:	4613      	movcc	r3, r2
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	8b9b      	ldrh	r3, [r3, #28]
 80018ce:	8bba      	ldrh	r2, [r7, #28]
 80018d0:	4293      	cmp	r3, r2
 80018d2:	bf28      	it	cs
 80018d4:	4613      	movcs	r3, r2
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8bdb      	ldrh	r3, [r3, #30]
 80018e0:	8bba      	ldrh	r2, [r7, #28]
 80018e2:	4293      	cmp	r3, r2
 80018e4:	bf38      	it	cc
 80018e6:	4613      	movcc	r3, r2
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 80018ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	dd15      	ble.n	8001922 <Joystick_Update+0x18e>
 80018f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fcf8 	bl	80002f0 <__aeabi_i2f>
 8001900:	4604      	mov	r4, r0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	88db      	ldrh	r3, [r3, #6]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	891b      	ldrh	r3, [r3, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fcee 	bl	80002f0 <__aeabi_i2f>
 8001914:	4603      	mov	r3, r0
 8001916:	4619      	mov	r1, r3
 8001918:	4620      	mov	r0, r4
 800191a:	f7fe fdf1 	bl	8000500 <__aeabi_fdiv>
 800191e:	4603      	mov	r3, r0
 8001920:	e016      	b.n	8001950 <Joystick_Update+0x1bc>
 8001922:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fce2 	bl	80002f0 <__aeabi_i2f>
 800192c:	4603      	mov	r3, r0
 800192e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	891b      	ldrh	r3, [r3, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcd6 	bl	80002f0 <__aeabi_i2f>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	4620      	mov	r0, r4
 800194a:	f7fe fdd9 	bl	8000500 <__aeabi_fdiv>
 800194e:	4603      	mov	r3, r0
 8001950:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8001952:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dd15      	ble.n	8001986 <Joystick_Update+0x1f2>
 800195a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fcc6 	bl	80002f0 <__aeabi_i2f>
 8001964:	4604      	mov	r4, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	8bdb      	ldrh	r3, [r3, #30]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	8c1b      	ldrh	r3, [r3, #32]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fcbc 	bl	80002f0 <__aeabi_i2f>
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	4620      	mov	r0, r4
 800197e:	f7fe fdbf 	bl	8000500 <__aeabi_fdiv>
 8001982:	4603      	mov	r3, r0
 8001984:	e016      	b.n	80019b4 <Joystick_Update+0x220>
 8001986:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fcb0 	bl	80002f0 <__aeabi_i2f>
 8001990:	4603      	mov	r3, r0
 8001992:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8b9b      	ldrh	r3, [r3, #28]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	8c1b      	ldrh	r3, [r3, #32]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fca4 	bl	80002f0 <__aeabi_i2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7fe fda7 	bl	8000500 <__aeabi_fdiv>
 80019b2:	4603      	mov	r3, r0
 80019b4:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7fe fea8 	bl	8000710 <__aeabi_fcmpgt>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <Joystick_Update+0x236>
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	e002      	b.n	80019d0 <Joystick_Update+0x23c>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019d0:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 80019d2:	f04f 0100 	mov.w	r1, #0
 80019d6:	6938      	ldr	r0, [r7, #16]
 80019d8:	f7fe fe9a 	bl	8000710 <__aeabi_fcmpgt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <Joystick_Update+0x252>
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	e002      	b.n	80019ec <Joystick_Update+0x258>
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019ec:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	4619      	mov	r1, r3
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7fe fe8b 	bl	8000710 <__aeabi_fcmpgt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00a      	beq.n	8001a16 <Joystick_Update+0x282>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4619      	mov	r1, r3
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7fe fe64 	bl	80006d4 <__aeabi_fcmplt>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <Joystick_Update+0x282>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	e001      	b.n	8001a1a <Joystick_Update+0x286>
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	68b8      	ldr	r0, [r7, #8]
 8001a26:	f7fe fe73 	bl	8000710 <__aeabi_fcmpgt>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00a      	beq.n	8001a46 <Joystick_Update+0x2b2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	4619      	mov	r1, r3
 8001a36:	68b8      	ldr	r0, [r7, #8]
 8001a38:	f7fe fe4c 	bl	80006d4 <__aeabi_fcmplt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <Joystick_Update+0x2b2>
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	e001      	b.n	8001a4a <Joystick_Update+0x2b6>
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}

08001a56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 fe79 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f80e 	bl	8001a88 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e001      	b.n	8001a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a78:	f7ff fc78 	bl	800136c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_InitTick+0x68>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d022      	beq.n	8001ae2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_InitTick+0x6c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_InitTick+0x68>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fe94 	bl	80027de <HAL_SYSTICK_Config>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10f      	bne.n	8001adc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	d809      	bhi.n	8001ad6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aca:	f000 fe50 	bl	800276e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_InitTick+0x70>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e007      	b.n	8001ae6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e004      	b.n	8001ae6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e001      	b.n	8001ae6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000060 	.word	0x20000060
 8001af4:	20000058 	.word	0x20000058
 8001af8:	2000005c 	.word	0x2000005c

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_IncTick+0x1c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_IncTick+0x20>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <HAL_IncTick+0x1c>)
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000778 	.word	0x20000778
 8001b1c:	20000060 	.word	0x20000060

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <HAL_GetTick+0x10>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000778 	.word	0x20000778

08001b34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e127      	b.n	8001da4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d115      	bne.n	8001b8e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b70:	4b8e      	ldr	r3, [pc, #568]	; (8001dac <HAL_ADC_Init+0x278>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a8d      	ldr	r2, [pc, #564]	; (8001dac <HAL_ADC_Init+0x278>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <HAL_ADC_Init+0x278>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fc1d 	bl	80013c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80ff 	bne.w	8001d9a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba4:	f023 0302 	bic.w	r3, r3, #2
 8001ba8:	f043 0202 	orr.w	r2, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001bb0:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_ADC_Init+0x27c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	497c      	ldr	r1, [pc, #496]	; (8001db0 <HAL_ADC_Init+0x27c>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bca:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001bee:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bf4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2302      	movs	r3, #2
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001c16:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d007      	beq.n	8001c36 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c32:	4313      	orrs	r3, r2
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b40      	cmp	r3, #64	; 0x40
 8001c42:	d04f      	beq.n	8001ce4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c56:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6912      	ldr	r2, [r2, #16]
 8001c5c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c60:	d003      	beq.n	8001c6a <HAL_ADC_Init+0x136>
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6912      	ldr	r2, [r2, #16]
 8001c66:	2a01      	cmp	r2, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_ADC_Init+0x13c>
 8001c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6e:	e000      	b.n	8001c72 <HAL_ADC_Init+0x13e>
 8001c70:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c72:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c76:	4313      	orrs	r3, r2
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d125      	bne.n	8001cd0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d114      	bne.n	8001cb8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001c98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	617a      	str	r2, [r7, #20]
  return result;
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	4093      	lsls	r3, r2
 8001cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb6:	e00b      	b.n	8001cd0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	f043 0220 	orr.w	r2, r3, #32
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_ADC_Init+0x280>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_ADC_Init+0x284>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d00:	d003      	beq.n	8001d0a <HAL_ADC_Init+0x1d6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d119      	bne.n	8001d3e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001d1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	fa92 f2a2 	rbit	r2, r2
 8001d26:	60fa      	str	r2, [r7, #12]
  return result;
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	fab2 f282 	clz	r2, r2
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	fa03 f202 	lsl.w	r2, r3, r2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3c:	e007      	b.n	8001d4e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_ADC_Init+0x288>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d10b      	bne.n	8001d76 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	f023 0303 	bic.w	r3, r3, #3
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d74:	e014      	b.n	8001da0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f023 0312 	bic.w	r3, r3, #18
 8001d7e:	f043 0210 	orr.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d98:	e002      	b.n	8001da0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001da0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3738      	adds	r7, #56	; 0x38
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40012700 	.word	0x40012700
 8001db4:	fcfc16ff 	.word	0xfcfc16ff
 8001db8:	c0fff18d 	.word	0xc0fff18d
 8001dbc:	bf80fffe 	.word	0xbf80fffe

08001dc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Start_DMA+0x1e>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e074      	b.n	8001ec8 <HAL_ADC_Start_DMA+0x108>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fae4 	bl	80023b4 <ADC_Enable>
 8001dec:	4603      	mov	r3, r0
 8001dee:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d167      	bne.n	8001ec6 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e34:	d106      	bne.n	8001e44 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	f023 0206 	bic.w	r2, r3, #6
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	651a      	str	r2, [r3, #80]	; 0x50
 8001e42:	e002      	b.n	8001e4a <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <HAL_ADC_Start_DMA+0x110>)
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_ADC_Start_DMA+0x114>)
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_ADC_Start_DMA+0x118>)
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3358      	adds	r3, #88	; 0x58
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f000 fd00 	bl	80028a8 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d107      	bne.n	8001ec6 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ec4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800246d 	.word	0x0800246d
 8001ed4:	08002515 	.word	0x08002515
 8001ed8:	08002531 	.word	0x08002531

08001edc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d14e      	bne.n	8001f90 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d147      	bne.n	8001f90 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d12c      	bne.n	8001f80 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d127      	bne.n	8001f80 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d119      	bne.n	8001f80 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0220 	bic.w	r2, r2, #32
 8001f5a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff f9e2 	bl	800134a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0212 	mvn.w	r2, #18
 8001f8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b80      	cmp	r3, #128	; 0x80
 8001f9c:	d15c      	bne.n	8002058 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d155      	bne.n	8002058 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13a      	bne.n	8002048 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d12c      	bne.n	8002048 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d125      	bne.n	8002048 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11e      	bne.n	8002048 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	d119      	bne.n	8002048 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002022:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fa8b 	bl	8002564 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f06f 020c 	mvn.w	r2, #12
 8002056:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d114      	bne.n	8002090 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10d      	bne.n	8002090 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f834 	bl	80020ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0201 	mvn.w	r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800209a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800209e:	d119      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d112      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0220 	mvn.w	r2, #32
 80020c2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f81b 	bl	8002100 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0220 	mvn.w	r2, #32
 80020d2:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x20>
 8002130:	2302      	movs	r3, #2
 8002132:	e134      	b.n	800239e <HAL_ADC_ConfigChannel+0x28a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d81c      	bhi.n	800217e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b05      	subs	r3, #5
 8002156:	221f      	movs	r2, #31
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	4019      	ands	r1, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b05      	subs	r3, #5
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
 800217c:	e07e      	b.n	800227c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d81c      	bhi.n	80021c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	3b23      	subs	r3, #35	; 0x23
 8002198:	221f      	movs	r2, #31
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	4019      	ands	r1, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b23      	subs	r3, #35	; 0x23
 80021b2:	fa00 f203 	lsl.w	r2, r0, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80021be:	e05d      	b.n	800227c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d81c      	bhi.n	8002202 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b41      	subs	r3, #65	; 0x41
 80021da:	221f      	movs	r2, #31
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4019      	ands	r1, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b41      	subs	r3, #65	; 0x41
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002200:	e03c      	b.n	800227c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b18      	cmp	r3, #24
 8002208:	d81c      	bhi.n	8002244 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	3b5f      	subs	r3, #95	; 0x5f
 800221c:	221f      	movs	r2, #31
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	4019      	ands	r1, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b5f      	subs	r3, #95	; 0x5f
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
 8002242:	e01b      	b.n	800227c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b7d      	subs	r3, #125	; 0x7d
 8002256:	221f      	movs	r2, #31
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	4019      	ands	r1, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b7d      	subs	r3, #125	; 0x7d
 8002270:	fa00 f203 	lsl.w	r2, r0, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b09      	cmp	r3, #9
 8002282:	d81a      	bhi.n	80022ba <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6959      	ldr	r1, [r3, #20]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	2207      	movs	r2, #7
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	4019      	ands	r1, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6898      	ldr	r0, [r3, #8]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	fa00 f203 	lsl.w	r2, r0, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	615a      	str	r2, [r3, #20]
 80022b8:	e042      	b.n	8002340 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b13      	cmp	r3, #19
 80022c0:	d81c      	bhi.n	80022fc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6919      	ldr	r1, [r3, #16]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	3b1e      	subs	r3, #30
 80022d4:	2207      	movs	r2, #7
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	4019      	ands	r1, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6898      	ldr	r0, [r3, #8]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	e021      	b.n	8002340 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b1a      	cmp	r3, #26
 8002302:	d81c      	bhi.n	800233e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68d9      	ldr	r1, [r3, #12]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	3b3c      	subs	r3, #60	; 0x3c
 8002316:	2207      	movs	r2, #7
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	4019      	ands	r1, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6898      	ldr	r0, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	3b3c      	subs	r3, #60	; 0x3c
 8002330:	fa00 f203 	lsl.w	r2, r0, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	e000      	b.n	8002340 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800233e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b10      	cmp	r3, #16
 8002346:	d003      	beq.n	8002350 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800234c:	2b11      	cmp	r3, #17
 800234e:	d121      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_ADC_ConfigChannel+0x294>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d11b      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_ADC_ConfigChannel+0x294>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_ADC_ConfigChannel+0x294>)
 8002362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002366:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b10      	cmp	r3, #16
 800236e:	d111      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_ADC_ConfigChannel+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <HAL_ADC_ConfigChannel+0x29c>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9a      	lsrs	r2, r3, #18
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002386:	e002      	b.n	800238e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	3b01      	subs	r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f9      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40012700 	.word	0x40012700
 80023ac:	20000058 	.word	0x20000058
 80023b0:	431bde83 	.word	0x431bde83

080023b4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d043      	beq.n	800245a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <ADC_Enable+0xb0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <ADC_Enable+0xb4>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9a      	lsrs	r2, r3, #18
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80023f6:	e002      	b.n	80023fe <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002404:	f7ff fb8c 	bl	8001b20 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800240a:	e01f      	b.n	800244c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800240c:	f7ff fb88 	bl	8001b20 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d918      	bls.n	800244c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d011      	beq.n	800244c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d1d8      	bne.n	800240c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000058 	.word	0x20000058
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002482:	2b00      	cmp	r3, #0
 8002484:	d13d      	bne.n	8002502 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12c      	bne.n	80024fa <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d127      	bne.n	80024fa <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0220 	bic.w	r2, r2, #32
 80024d4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7fe ff25 	bl	800134a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002500:	e004      	b.n	800250c <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fdda 	bl	80020dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	f043 0204 	orr.w	r2, r3, #4
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f7ff fdd2 	bl	8002100 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
	...

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4906      	ldr	r1, [pc, #24]	; (8002610 <__NVIC_EnableIRQ+0x34>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db12      	blt.n	800264c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	490a      	ldr	r1, [pc, #40]	; (8002658 <__NVIC_DisableIRQ+0x44>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	3320      	adds	r3, #32
 800263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002640:	f3bf 8f4f 	dsb	sy
}
 8002644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002646:	f3bf 8f6f 	isb	sy
}
 800264a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
         );
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002724:	d301      	bcc.n	800272a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002726:	2301      	movs	r3, #1
 8002728:	e00f      	b.n	800274a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <SysTick_Config+0x40>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002732:	210f      	movs	r1, #15
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f7ff ff90 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <SysTick_Config+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <SysTick_Config+0x40>)
 8002744:	2207      	movs	r2, #7
 8002746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000e010 	.word	0xe000e010

08002758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff09 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002780:	f7ff ff1e 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff ff90 	bl	80026b0 <NVIC_EncodePriority>
 8002790:	4602      	mov	r2, r0
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff5f 	bl	800265c <__NVIC_SetPriority>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff11 	bl	80025dc <__NVIC_EnableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff1f 	bl	8002614 <__NVIC_DisableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff94 	bl	8002714 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e043      	b.n	8002892 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_DMA_Init+0xa4>)
 8002812:	4413      	add	r3, r2
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_DMA_Init+0xa8>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	009a      	lsls	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_DMA_Init+0xac>)
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800284c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	bffd9ff8 	.word	0xbffd9ff8
 80028a0:	cccccccd 	.word	0xcccccccd
 80028a4:	40026000 	.word	0x40026000

080028a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_DMA_Start_IT+0x20>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e04b      	b.n	8002960 <HAL_DMA_Start_IT+0xb8>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d13a      	bne.n	8002952 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f8e0 	bl	8002ac6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 020e 	orr.w	r2, r2, #14
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e00f      	b.n	8002940 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0204 	bic.w	r2, r2, #4
 800292e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 020a 	orr.w	r2, r2, #10
 800293e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e005      	b.n	800295e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800295a:	2302      	movs	r3, #2
 800295c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800295e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 031c 	and.w	r3, r3, #28
 8002988:	2204      	movs	r2, #4
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d026      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x7a>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d021      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0204 	bic.w	r2, r2, #4
 80029ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f003 021c 	and.w	r2, r3, #28
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	2104      	movs	r1, #4
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d071      	beq.n	8002abc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	e06c      	b.n	8002abc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 031c 	and.w	r3, r3, #28
 80029ea:	2202      	movs	r2, #2
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d02e      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xec>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d029      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 020a 	bic.w	r2, r2, #10
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 021c 	and.w	r2, r3, #28
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2102      	movs	r1, #2
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d038      	beq.n	8002abc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a52:	e033      	b.n	8002abc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f003 031c 	and.w	r3, r3, #28
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02a      	beq.n	8002abe <HAL_DMA_IRQHandler+0x156>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d025      	beq.n	8002abe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 020e 	bic.w	r2, r2, #14
 8002a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 021c 	and.w	r2, r3, #28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
}
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f003 021c 	and.w	r2, r3, #28
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d108      	bne.n	8002b0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b08:	e007      	b.n	8002b1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	60da      	str	r2, [r3, #12]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b3a:	e154      	b.n	8002de6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8146 	beq.w	8002de0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d005      	beq.n	8002b6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d130      	bne.n	8002bce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	f003 0201 	and.w	r2, r3, #1
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d017      	beq.n	8002c0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d123      	bne.n	8002c5e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	6939      	ldr	r1, [r7, #16]
 8002c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80a0 	beq.w	8002de0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca0:	4b58      	ldr	r3, [pc, #352]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	4b55      	ldr	r3, [pc, #340]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cb8:	4a53      	ldr	r2, [pc, #332]	; (8002e08 <HAL_GPIO_Init+0x2e4>)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a4b      	ldr	r2, [pc, #300]	; (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d019      	beq.n	8002d18 <HAL_GPIO_Init+0x1f4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a4a      	ldr	r2, [pc, #296]	; (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <HAL_GPIO_Init+0x1f0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00d      	beq.n	8002d10 <HAL_GPIO_Init+0x1ec>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a48      	ldr	r2, [pc, #288]	; (8002e18 <HAL_GPIO_Init+0x2f4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <HAL_GPIO_Init+0x1e8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a47      	ldr	r2, [pc, #284]	; (8002e1c <HAL_GPIO_Init+0x2f8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_GPIO_Init+0x1e4>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e008      	b.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d08:	2305      	movs	r3, #5
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e004      	b.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e002      	b.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	f002 0203 	and.w	r2, r2, #3
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	4093      	lsls	r3, r2
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d2a:	4937      	ldr	r1, [pc, #220]	; (8002e08 <HAL_GPIO_Init+0x2e4>)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d38:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d86:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002db0:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dda:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3301      	adds	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f aea3 	bne.w	8002b3c <HAL_GPIO_Init+0x18>
  }
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010400 	.word	0x40010400

08002e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e54:	b08b      	sub	sp, #44	; 0x2c
 8002e56:	af06      	add	r7, sp, #24
 8002e58:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d0      	b.n	8003006 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7fe fb3d 	bl	80014f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2203      	movs	r2, #3
 8002e82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fcbe 	bl	800480c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e04c      	b.n	8002f30 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	b298      	uxth	r0, r3
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3336      	adds	r3, #54	; 0x36
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3303      	adds	r3, #3
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	3338      	adds	r3, #56	; 0x38
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	333c      	adds	r3, #60	; 0x3c
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	3340      	adds	r3, #64	; 0x40
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3ad      	bcc.n	8002e96 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e044      	b.n	8002fca <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	440b      	add	r3, r1
 8002f90:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3b5      	bcc.n	8002f40 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	687e      	ldr	r6, [r7, #4]
 8002fdc:	466d      	mov	r5, sp
 8002fde:	f106 0410 	add.w	r4, r6, #16
 8002fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	1d33      	adds	r3, r6, #4
 8002fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f001 fc26 	bl	8004840 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e31d      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003022:	4b94      	ldr	r3, [pc, #592]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800302c:	4b91      	ldr	r3, [pc, #580]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003034:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d07b      	beq.n	800313a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d006      	beq.n	8003056 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d10f      	bne.n	800306e <HAL_RCC_OscConfig+0x5e>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d10b      	bne.n	800306e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003056:	4b87      	ldr	r3, [pc, #540]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d06a      	beq.n	8003138 <HAL_RCC_OscConfig+0x128>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d166      	bne.n	8003138 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e2f7      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d106      	bne.n	8003084 <HAL_RCC_OscConfig+0x74>
 8003076:	4b7f      	ldr	r3, [pc, #508]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7e      	ldr	r2, [pc, #504]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e02d      	b.n	80030e0 <HAL_RCC_OscConfig+0xd0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10c      	bne.n	80030a6 <HAL_RCC_OscConfig+0x96>
 800308c:	4b79      	ldr	r3, [pc, #484]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a78      	ldr	r2, [pc, #480]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b76      	ldr	r3, [pc, #472]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a75      	ldr	r2, [pc, #468]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e01c      	b.n	80030e0 <HAL_RCC_OscConfig+0xd0>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0xb8>
 80030ae:	4b71      	ldr	r3, [pc, #452]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a70      	ldr	r2, [pc, #448]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6e      	ldr	r3, [pc, #440]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6d      	ldr	r2, [pc, #436]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xd0>
 80030c8:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a69      	ldr	r2, [pc, #420]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b67      	ldr	r3, [pc, #412]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a66      	ldr	r2, [pc, #408]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fd1a 	bl	8001b20 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fd16 	bl	8001b20 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e2ad      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xe0>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fd06 	bl	8001b20 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe fd02 	bl	8001b20 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e299      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800312a:	4b52      	ldr	r3, [pc, #328]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x108>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d05a      	beq.n	80031fc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b04      	cmp	r3, #4
 800314a:	d005      	beq.n	8003158 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d119      	bne.n	8003186 <HAL_RCC_OscConfig+0x176>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d116      	bne.n	8003186 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003158:	4b46      	ldr	r3, [pc, #280]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_OscConfig+0x160>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d001      	beq.n	8003170 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e276      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b40      	ldr	r3, [pc, #256]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	493d      	ldr	r1, [pc, #244]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003184:	e03a      	b.n	80031fc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d020      	beq.n	80031d0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318e:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <HAL_RCC_OscConfig+0x268>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fcc4 	bl	8001b20 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319c:	f7fe fcc0 	bl	8001b20 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e257      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	492a      	ldr	r1, [pc, #168]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
 80031ce:	e015      	b.n	80031fc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_RCC_OscConfig+0x268>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fca3 	bl	8001b20 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031de:	f7fe fc9f 	bl	8001b20 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e236      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80b8 	beq.w	800337a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d170      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_OscConfig+0x218>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e21a      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003234:	429a      	cmp	r2, r3
 8003236:	d921      	bls.n	800327c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fc4b 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e208      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4906      	ldr	r1, [pc, #24]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	4901      	ldr	r1, [pc, #4]	; (8003274 <HAL_RCC_OscConfig+0x264>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
 8003272:	e020      	b.n	80032b6 <HAL_RCC_OscConfig+0x2a6>
 8003274:	40023800 	.word	0x40023800
 8003278:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327c:	4b99      	ldr	r3, [pc, #612]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4996      	ldr	r1, [pc, #600]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800328e:	4b95      	ldr	r3, [pc, #596]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	4991      	ldr	r1, [pc, #580]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fc16 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e1d3      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	0b5b      	lsrs	r3, r3, #13
 80032bc:	3301      	adds	r3, #1
 80032be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80032c6:	4a87      	ldr	r2, [pc, #540]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80032c8:	6892      	ldr	r2, [r2, #8]
 80032ca:	0912      	lsrs	r2, r2, #4
 80032cc:	f002 020f 	and.w	r2, r2, #15
 80032d0:	4985      	ldr	r1, [pc, #532]	; (80034e8 <HAL_RCC_OscConfig+0x4d8>)
 80032d2:	5c8a      	ldrb	r2, [r1, r2]
 80032d4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80032d6:	4a85      	ldr	r2, [pc, #532]	; (80034ec <HAL_RCC_OscConfig+0x4dc>)
 80032d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032da:	4b85      	ldr	r3, [pc, #532]	; (80034f0 <HAL_RCC_OscConfig+0x4e0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fbd2 	bl	8001a88 <HAL_InitTick>
 80032e4:	4603      	mov	r3, r0
 80032e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d045      	beq.n	800337a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	e1b5      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d029      	beq.n	800334e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032fa:	4b7e      	ldr	r3, [pc, #504]	; (80034f4 <HAL_RCC_OscConfig+0x4e4>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fc0e 	bl	8001b20 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003308:	f7fe fc0a 	bl	8001b20 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1a1      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800331a:	4b72      	ldr	r3, [pc, #456]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003326:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	496c      	ldr	r1, [pc, #432]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003338:	4b6a      	ldr	r3, [pc, #424]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	4967      	ldr	r1, [pc, #412]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
 800334c:	e015      	b.n	800337a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800334e:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x4e4>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fbe4 	bl	8001b20 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800335c:	f7fe fbe0 	bl	8001b20 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e177      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800336e:	4b5d      	ldr	r3, [pc, #372]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d030      	beq.n	80033e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fe fbc4 	bl	8001b20 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe fbc0 	bl	8001b20 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e157      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x38c>
 80033ba:	e015      	b.n	80033e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033bc:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fbad 	bl	8001b20 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe fba9 	bl	8001b20 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e140      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033dc:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80b5 	beq.w	8003560 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fa:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10d      	bne.n	8003422 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	4a36      	ldr	r2, [pc, #216]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6253      	str	r3, [r2, #36]	; 0x24
 8003412:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b33      	ldr	r3, [pc, #204]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a32      	ldr	r2, [pc, #200]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7fe fb71 	bl	8001b20 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe fb6d 	bl	8001b20 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b64      	cmp	r3, #100	; 0x64
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e104      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x466>
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003472:	6353      	str	r3, [r2, #52]	; 0x34
 8003474:	e02d      	b.n	80034d2 <HAL_RCC_OscConfig+0x4c2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x488>
 800347e:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003488:	6353      	str	r3, [r2, #52]	; 0x34
 800348a:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 8003490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003494:	6353      	str	r3, [r2, #52]	; 0x34
 8003496:	e01c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4c2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b05      	cmp	r3, #5
 800349e:	d10c      	bne.n	80034ba <HAL_RCC_OscConfig+0x4aa>
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034aa:	6353      	str	r3, [r2, #52]	; 0x34
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b0:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6353      	str	r3, [r2, #52]	; 0x34
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0x4c2>
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c4:	6353      	str	r3, [r2, #52]	; 0x34
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	4a06      	ldr	r2, [pc, #24]	; (80034e4 <HAL_RCC_OscConfig+0x4d4>)
 80034cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d024      	beq.n	8003524 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034da:	f7fe fb21 	bl	8001b20 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034e0:	e019      	b.n	8003516 <HAL_RCC_OscConfig+0x506>
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08006fd8 	.word	0x08006fd8
 80034ec:	20000058 	.word	0x20000058
 80034f0:	2000005c 	.word	0x2000005c
 80034f4:	42470020 	.word	0x42470020
 80034f8:	42470680 	.word	0x42470680
 80034fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe fb0e 	bl	8001b20 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0a3      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003516:	4b54      	ldr	r3, [pc, #336]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0ee      	beq.n	8003500 <HAL_RCC_OscConfig+0x4f0>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fe fafc 	bl	8001b20 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fe faf8 	bl	8001b20 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e08d      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003542:	4b49      	ldr	r3, [pc, #292]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ee      	bne.n	800352c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003554:	4b44      	ldr	r3, [pc, #272]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	4a43      	ldr	r2, [pc, #268]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d079      	beq.n	800365c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d056      	beq.n	800361c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b02      	cmp	r3, #2
 8003574:	d13b      	bne.n	80035ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCC_OscConfig+0x65c>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe fad0 	bl	8001b20 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe facc 	bl	8001b20 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e063      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a2:	4b31      	ldr	r3, [pc, #196]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	4319      	orrs	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	430b      	orrs	r3, r1
 80035ba:	492b      	ldr	r1, [pc, #172]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_OscConfig+0x65c>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe faab 	bl	8001b20 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe faa7 	bl	8001b20 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e03e      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x5be>
 80035ec:	e036      	b.n	800365c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_RCC_OscConfig+0x65c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fa94 	bl	8001b20 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fa90 	bl	8001b20 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e027      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x5ec>
 800361a:	e01f      	b.n	800365c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e01a      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCC_OscConfig+0x658>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	429a      	cmp	r2, r3
 800363a:	d10d      	bne.n	8003658 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d106      	bne.n	8003658 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	42470060 	.word	0x42470060

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e11a      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b8f      	ldr	r3, [pc, #572]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d919      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x34>
 8003698:	4b8a      	ldr	r3, [pc, #552]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a89      	ldr	r2, [pc, #548]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b87      	ldr	r3, [pc, #540]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 0201 	bic.w	r2, r3, #1
 80036ac:	4985      	ldr	r1, [pc, #532]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b4:	4b83      	ldr	r3, [pc, #524]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0f9      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d2:	4b7d      	ldr	r3, [pc, #500]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	497a      	ldr	r1, [pc, #488]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 808e 	beq.w	800380e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fa:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d121      	bne.n	800374a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0d7      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003712:	4b6d      	ldr	r3, [pc, #436]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d115      	bne.n	800374a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0cb      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800372a:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0bf      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800373a:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0b7      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374a:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 0203 	bic.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	495c      	ldr	r1, [pc, #368]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 8003758:	4313      	orrs	r3, r2
 800375a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800375c:	f7fe f9e0 	bl	8001b20 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d112      	bne.n	8003790 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fe f9d8 	bl	8001b20 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e09b      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003782:	4b51      	ldr	r3, [pc, #324]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d1ee      	bne.n	800376c <HAL_RCC_ClockConfig+0xfc>
 800378e:	e03e      	b.n	800380e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d112      	bne.n	80037be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379a:	f7fe f9c1 	bl	8001b20 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e084      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b0:	4b45      	ldr	r3, [pc, #276]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_ClockConfig+0x12a>
 80037bc:	e027      	b.n	800380e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d11d      	bne.n	8003802 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fe f9aa 	bl	8001b20 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e06d      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037de:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d1ee      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x158>
 80037ea:	e010      	b.n	800380e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fe f998 	bl	8001b20 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e05b      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ee      	bne.n	80037ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380e:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d219      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_RCC_ClockConfig+0x1be>
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	4923      	ldr	r1, [pc, #140]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <HAL_RCC_ClockConfig+0x254>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e034      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4917      	ldr	r1, [pc, #92]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	490f      	ldr	r1, [pc, #60]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388e:	f000 f823 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8003892:	4602      	mov	r2, r0
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <HAL_RCC_ClockConfig+0x258>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	490b      	ldr	r1, [pc, #44]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	5ccb      	ldrb	r3, [r1, r3]
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe f8ea 	bl	8001a88 <HAL_InitTick>
 80038b4:	4603      	mov	r3, r0
 80038b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038b8:	7afb      	ldrb	r3, [r7, #11]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023c00 	.word	0x40023c00
 80038c8:	40023800 	.word	0x40023800
 80038cc:	08006fd8 	.word	0x08006fd8
 80038d0:	20000058 	.word	0x20000058
 80038d4:	2000005c 	.word	0x2000005c

080038d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b092      	sub	sp, #72	; 0x48
 80038de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80038e0:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	d00d      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x34>
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	f200 80d5 	bhi.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x1c8>
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x28>
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x2e>
 80038fe:	e0cf      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b72      	ldr	r3, [pc, #456]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003904:	e0da      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003906:	4b72      	ldr	r3, [pc, #456]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003908:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800390a:	e0d7      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390e:	0c9b      	lsrs	r3, r3, #18
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003916:	5c9b      	ldrb	r3, [r3, r2]
 8003918:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	0d9b      	lsrs	r3, r3, #22
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	3301      	adds	r3, #1
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003926:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d05d      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2200      	movs	r2, #0
 8003936:	4618      	mov	r0, r3
 8003938:	4611      	mov	r1, r2
 800393a:	4604      	mov	r4, r0
 800393c:	460d      	mov	r5, r1
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	0159      	lsls	r1, r3, #5
 800394c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003950:	0150      	lsls	r0, r2, #5
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4621      	mov	r1, r4
 8003958:	1a51      	subs	r1, r2, r1
 800395a:	6139      	str	r1, [r7, #16]
 800395c:	4629      	mov	r1, r5
 800395e:	eb63 0301 	sbc.w	r3, r3, r1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003970:	4659      	mov	r1, fp
 8003972:	018b      	lsls	r3, r1, #6
 8003974:	4651      	mov	r1, sl
 8003976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800397a:	4651      	mov	r1, sl
 800397c:	018a      	lsls	r2, r1, #6
 800397e:	46d4      	mov	ip, sl
 8003980:	ebb2 080c 	subs.w	r8, r2, ip
 8003984:	4659      	mov	r1, fp
 8003986:	eb63 0901 	sbc.w	r9, r3, r1
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800399e:	4690      	mov	r8, r2
 80039a0:	4699      	mov	r9, r3
 80039a2:	4623      	mov	r3, r4
 80039a4:	eb18 0303 	adds.w	r3, r8, r3
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	462b      	mov	r3, r5
 80039ac:	eb49 0303 	adc.w	r3, r9, r3
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039be:	4629      	mov	r1, r5
 80039c0:	024b      	lsls	r3, r1, #9
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	4604      	mov	r4, r0
 80039c8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80039cc:	4601      	mov	r1, r0
 80039ce:	024a      	lsls	r2, r1, #9
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	2200      	movs	r2, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e0:	f7fc fee6 	bl	80007b0 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	647b      	str	r3, [r7, #68]	; 0x44
 80039ec:	e055      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2200      	movs	r2, #0
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	627a      	str	r2, [r7, #36]	; 0x24
 80039f6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039fa:	4642      	mov	r2, r8
 80039fc:	464b      	mov	r3, r9
 80039fe:	f04f 0000 	mov.w	r0, #0
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	0159      	lsls	r1, r3, #5
 8003a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0c:	0150      	lsls	r0, r2, #5
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	46c4      	mov	ip, r8
 8003a14:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003a18:	4640      	mov	r0, r8
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	468c      	mov	ip, r1
 8003a1e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a2e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a32:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a36:	ebb2 040a 	subs.w	r4, r2, sl
 8003a3a:	eb63 050b 	sbc.w	r5, r3, fp
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	00eb      	lsls	r3, r5, #3
 8003a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4c:	00e2      	lsls	r2, r4, #3
 8003a4e:	4614      	mov	r4, r2
 8003a50:	461d      	mov	r5, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	18e3      	adds	r3, r4, r3
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	eb45 0303 	adc.w	r3, r5, r3
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	028b      	lsls	r3, r1, #10
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	4604      	mov	r4, r0
 8003a76:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	028a      	lsls	r2, r1, #10
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	2200      	movs	r2, #0
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	61fa      	str	r2, [r7, #28]
 8003a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a8e:	f7fc fe8f 	bl	80007b0 <__aeabi_uldivmod>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4613      	mov	r3, r2
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003a9e:	e00d      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0b5b      	lsrs	r3, r3, #13
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3748      	adds	r7, #72	; 0x48
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200
 8003ad4:	08006fcc 	.word	0x08006fcc

08003ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d12c      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003af0:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e016      	b.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6253      	str	r3, [r2, #36]	; 0x24
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003b28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	4a17      	ldr	r2, [pc, #92]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003b3c:	d105      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b44:	d101      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003b46:	2301      	movs	r3, #1
 8003b48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 0201 	bic.w	r2, r3, #1
 8003b64:	490b      	ldr	r1, [pc, #44]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000
 8003b94:	40023c00 	.word	0x40023c00

08003b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e031      	b.n	8003c0e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fc76 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f000 fba8 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e032      	b.n	8003c96 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d00e      	beq.n	8003c60 <HAL_TIM_Base_Start+0x48>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_TIM_Base_Start+0x88>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_TIM_Base_Start+0x48>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <HAL_TIM_Base_Start+0x8c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_TIM_Base_Start+0x48>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <HAL_TIM_Base_Start+0x90>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d111      	bne.n	8003c84 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d010      	beq.n	8003c94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c82:	e007      	b.n	8003c94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40010800 	.word	0x40010800

08003cac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e031      	b.n	8003d22 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f829 	bl	8003d2a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f000 fb1e 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_TIM_OC_Start_IT+0x24>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e022      	b.n	8003da6 <HAL_TIM_OC_Start_IT+0x6a>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d109      	bne.n	8003d7a <HAL_TIM_OC_Start_IT+0x3e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e015      	b.n	8003da6 <HAL_TIM_OC_Start_IT+0x6a>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d109      	bne.n	8003d94 <HAL_TIM_OC_Start_IT+0x58>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	bf14      	ite	ne
 8003d8c:	2301      	movne	r3, #1
 8003d8e:	2300      	moveq	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e008      	b.n	8003da6 <HAL_TIM_OC_Start_IT+0x6a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e097      	b.n	8003ede <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_OC_Start_IT+0x82>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003dbc:	e013      	b.n	8003de6 <HAL_TIM_OC_Start_IT+0xaa>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_OC_Start_IT+0x92>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003dcc:	e00b      	b.n	8003de6 <HAL_TIM_OC_Start_IT+0xaa>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_OC_Start_IT+0xa2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ddc:	e003      	b.n	8003de6 <HAL_TIM_OC_Start_IT+0xaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	d841      	bhi.n	8003e70 <HAL_TIM_OC_Start_IT+0x134>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_TIM_OC_Start_IT+0xb8>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003e71 	.word	0x08003e71
 8003dfc:	08003e71 	.word	0x08003e71
 8003e00:	08003e71 	.word	0x08003e71
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e71 	.word	0x08003e71
 8003e0c:	08003e71 	.word	0x08003e71
 8003e10:	08003e71 	.word	0x08003e71
 8003e14:	08003e4d 	.word	0x08003e4d
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e5f 	.word	0x08003e5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0202 	orr.w	r2, r2, #2
 8003e36:	60da      	str	r2, [r3, #12]
      break;
 8003e38:	e01b      	b.n	8003e72 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0204 	orr.w	r2, r2, #4
 8003e48:	60da      	str	r2, [r3, #12]
      break;
 8003e4a:	e012      	b.n	8003e72 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0208 	orr.w	r2, r2, #8
 8003e5a:	60da      	str	r2, [r3, #12]
      break;
 8003e5c:	e009      	b.n	8003e72 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0210 	orr.w	r2, r2, #16
 8003e6c:	60da      	str	r2, [r3, #12]
      break;
 8003e6e:	e000      	b.n	8003e72 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8003e70:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2201      	movs	r2, #1
 8003e78:	6839      	ldr	r1, [r7, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fc43 	bl	8004706 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d00e      	beq.n	8003ea8 <HAL_TIM_OC_Start_IT+0x16c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <HAL_TIM_OC_Start_IT+0x1ac>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_TIM_OC_Start_IT+0x16c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <HAL_TIM_OC_Start_IT+0x1b0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_TIM_OC_Start_IT+0x16c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <HAL_TIM_OC_Start_IT+0x1b4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d111      	bne.n	8003ecc <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	d010      	beq.n	8003edc <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eca:	e007      	b.n	8003edc <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40010800 	.word	0x40010800

08003ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d122      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d11b      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0202 	mvn.w	r2, #2
 8003f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9dd 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd f9ec 	bl	800131c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f9df 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d122      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0204 	mvn.w	r2, #4
 8003f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f9b3 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fd f9c2 	bl	800131c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f9b5 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d122      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0208 	mvn.w	r2, #8
 8003fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f989 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003fe4:	e005      	b.n	8003ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd f998 	bl	800131c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f98b 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b10      	cmp	r3, #16
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b10      	cmp	r3, #16
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0210 	mvn.w	r2, #16
 800401c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2208      	movs	r2, #8
 8004022:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f95f 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd f96e 	bl	800131c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f961 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b01      	cmp	r3, #1
 8004058:	d10e      	bne.n	8004078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d107      	bne.n	8004078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0201 	mvn.w	r2, #1
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f936 	bl	80042e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d10e      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d107      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f93b 	bl	800431a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e046      	b.n	8004154 <HAL_TIM_OC_ConfigChannel+0xa8>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d839      	bhi.n	8004148 <HAL_TIM_OC_ConfigChannel+0x9c>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_TIM_OC_ConfigChannel+0x30>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004149 	.word	0x08004149
 80040e4:	08004149 	.word	0x08004149
 80040e8:	08004149 	.word	0x08004149
 80040ec:	0800411f 	.word	0x0800411f
 80040f0:	08004149 	.word	0x08004149
 80040f4:	08004149 	.word	0x08004149
 80040f8:	08004149 	.word	0x08004149
 80040fc:	0800412d 	.word	0x0800412d
 8004100:	08004149 	.word	0x08004149
 8004104:	08004149 	.word	0x08004149
 8004108:	08004149 	.word	0x08004149
 800410c:	0800413b 	.word	0x0800413b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f96a 	bl	80043f0 <TIM_OC1_SetConfig>
      break;
 800411c:	e015      	b.n	800414a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f99f 	bl	8004468 <TIM_OC2_SetConfig>
      break;
 800412a:	e00e      	b.n	800414a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f9d6 	bl	80044e4 <TIM_OC3_SetConfig>
      break;
 8004138:	e007      	b.n	800414a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fa0c 	bl	800455e <TIM_OC4_SetConfig>
      break;
 8004146:	e000      	b.n	800414a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIM_ConfigClockSource+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e0b3      	b.n	80042dc <HAL_TIM_ConfigClockSource+0x180>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800419a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ac:	d03e      	beq.n	800422c <HAL_TIM_ConfigClockSource+0xd0>
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	f200 8087 	bhi.w	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ba:	f000 8085 	beq.w	80042c8 <HAL_TIM_ConfigClockSource+0x16c>
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d87f      	bhi.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041c4:	2b70      	cmp	r3, #112	; 0x70
 80041c6:	d01a      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0xa2>
 80041c8:	2b70      	cmp	r3, #112	; 0x70
 80041ca:	d87b      	bhi.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d050      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x116>
 80041d0:	2b60      	cmp	r3, #96	; 0x60
 80041d2:	d877      	bhi.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041d4:	2b50      	cmp	r3, #80	; 0x50
 80041d6:	d03c      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0xf6>
 80041d8:	2b50      	cmp	r3, #80	; 0x50
 80041da:	d873      	bhi.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d058      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x136>
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d86f      	bhi.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041e4:	2b30      	cmp	r3, #48	; 0x30
 80041e6:	d064      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x156>
 80041e8:	2b30      	cmp	r3, #48	; 0x30
 80041ea:	d86b      	bhi.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d060      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x156>
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d867      	bhi.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d05c      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x156>
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d05a      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041fc:	e062      	b.n	80042c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f000 fa5b 	bl	80046c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004220:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	609a      	str	r2, [r3, #8]
      break;
 800422a:	e04e      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6899      	ldr	r1, [r3, #8]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f000 fa44 	bl	80046c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424e:	609a      	str	r2, [r3, #8]
      break;
 8004250:	e03b      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	461a      	mov	r2, r3
 8004260:	f000 f9bb 	bl	80045da <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2150      	movs	r1, #80	; 0x50
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fa12 	bl	8004694 <TIM_ITRx_SetConfig>
      break;
 8004270:	e02b      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	461a      	mov	r2, r3
 8004280:	f000 f9d9 	bl	8004636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2160      	movs	r1, #96	; 0x60
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fa02 	bl	8004694 <TIM_ITRx_SetConfig>
      break;
 8004290:	e01b      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	461a      	mov	r2, r3
 80042a0:	f000 f99b 	bl	80045da <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2140      	movs	r1, #64	; 0x40
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f9f2 	bl	8004694 <TIM_ITRx_SetConfig>
      break;
 80042b0:	e00b      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f000 f9e9 	bl	8004694 <TIM_ITRx_SetConfig>
        break;
 80042c2:	e002      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0x28>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a25      	ldr	r2, [pc, #148]	; (80043dc <TIM_Base_SetConfig+0xb0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0x28>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <TIM_Base_SetConfig+0xb4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d013      	beq.n	8004396 <TIM_Base_SetConfig+0x6a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1a      	ldr	r2, [pc, #104]	; (80043dc <TIM_Base_SetConfig+0xb0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_Base_SetConfig+0x6a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <TIM_Base_SetConfig+0xb4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_Base_SetConfig+0x6a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <TIM_Base_SetConfig+0xb8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_Base_SetConfig+0x6a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <TIM_Base_SetConfig+0xbc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_Base_SetConfig+0x6a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a16      	ldr	r2, [pc, #88]	; (80043ec <TIM_Base_SetConfig+0xc0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d108      	bne.n	80043a8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	615a      	str	r2, [r3, #20]
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40010800 	.word	0x40010800
 80043e8:	40010c00 	.word	0x40010c00
 80043ec:	40011000 	.word	0x40011000

080043f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0302 	bic.w	r3, r3, #2
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0210 	bic.w	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0320 	bic.w	r3, r3, #32
 80044b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800452c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr

0800455e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455e:	b480      	push	{r7}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	031b      	lsls	r3, r3, #12
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	621a      	str	r2, [r3, #32]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045da:	b480      	push	{r7}
 80045dc:	b087      	sub	sp, #28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f023 0201 	bic.w	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 030a 	bic.w	r3, r3, #10
 8004616:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	621a      	str	r2, [r3, #32]
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004636:	b480      	push	{r7}
 8004638:	b087      	sub	sp, #28
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0210 	bic.w	r2, r3, #16
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f043 0307 	orr.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	609a      	str	r2, [r3, #8]
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	021a      	lsls	r2, r3, #8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004706:	b480      	push	{r7}
 8004708:	b087      	sub	sp, #28
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2201      	movs	r2, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	43db      	mvns	r3, r3
 8004728:	401a      	ands	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	431a      	orrs	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
	...

08004750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004764:	2302      	movs	r3, #2
 8004766:	e046      	b.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d00e      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a13      	ldr	r2, [pc, #76]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a12      	ldr	r2, [pc, #72]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a10      	ldr	r2, [pc, #64]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10c      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40010800 	.word	0x40010800

0800480c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004814:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004818:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	b29b      	uxth	r3, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	4013      	ands	r3, r2
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004840:	b084      	sub	sp, #16
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	f107 0014 	add.w	r0, r7, #20
 800484e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	b004      	add	sp, #16
 800487e:	4770      	bx	lr

08004880 <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 800488c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da08      	bge.n	80048a6 <USBD_EpAddr2Ref+0x26>
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	3303      	adds	r3, #3
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	4413      	add	r3, r2
 80048a2:	3304      	adds	r3, #4
 80048a4:	e005      	b.n	80048b2 <USBD_EpAddr2Ref+0x32>
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	330b      	adds	r3, #11
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4413      	add	r3, r2
 80048b0:	3304      	adds	r3, #4
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	461a      	mov	r2, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	70fb      	strb	r3, [r7, #3]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70bb      	strb	r3, [r7, #2]
 80048d2:	4613      	mov	r3, r2
 80048d4:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 80048d6:	883b      	ldrh	r3, [r7, #0]
 80048d8:	78ba      	ldrb	r2, [r7, #2]
 80048da:	78f9      	ldrb	r1, [r7, #3]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f001 fc59 	bl	8006194 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ffca 	bl	8004880 <USBD_EpAddr2Ref>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2201      	movs	r2, #1
 80048f0:	72da      	strb	r2, [r3, #11]
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fdf2 	bl	80064f4 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ffb3 	bl	8004880 <USBD_EpAddr2Ref>
 800491a:	4603      	mov	r3, r0
 800491c:	2200      	movs	r2, #0
 800491e:	72da      	strb	r2, [r3, #11]
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <hid_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t hid_getDesc(USBD_HID_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 8004928:	b5b0      	push	{r4, r5, r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
    USBD_HandleType *dev = itf->Base.Device;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	61fb      	str	r3, [r7, #28]
    USBD_HID_DescType *desc = (USBD_HID_DescType*)dest;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	61bb      	str	r3, [r7, #24]
    uint16_t len = sizeof(hid_desc);
 8004940:	2312      	movs	r3, #18
 8004942:	82fb      	strh	r3, [r7, #22]

    memcpy(dest, &hid_desc, sizeof(hid_desc));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <hid_getDesc+0x88>)
 8004948:	461d      	mov	r5, r3
 800494a:	4614      	mov	r4, r2
 800494c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800494e:	6028      	str	r0, [r5, #0]
 8004950:	6069      	str	r1, [r5, #4]
 8004952:	60aa      	str	r2, [r5, #8]
 8004954:	60eb      	str	r3, [r5, #12]
 8004956:	8823      	ldrh	r3, [r4, #0]
 8004958:	822b      	strh	r3, [r5, #16]

    /* Set report size */
    desc->HIDCD.sHIDD[0].wItemLength = HID_APP(itf)->Report->DescLength;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	889a      	ldrh	r2, [r3, #4]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	821a      	strh	r2, [r3, #16]

#if (USBD_MAX_IF_COUNT > 1)
    /* Adjustment of interface indexes */
    desc->HID.bInterfaceNumber = ifNum;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	7afa      	ldrb	r2, [r7, #11]
 800496a:	709a      	strb	r2, [r3, #2]

    desc->HID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	3301      	adds	r3, #1
 8004970:	b2da      	uxtb	r2, r3
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	721a      	strb	r2, [r3, #8]

#endif /* (USBD_MAX_IF_COUNT > 1) */

    /* Add endpoints */
    len += USBD_EpDesc(dev, itf->Config.InEpNum, &dest[len]);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	7c19      	ldrb	r1, [r3, #16]
 800497a:	8afb      	ldrh	r3, [r7, #22]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	461a      	mov	r2, r3
 8004982:	69f8      	ldr	r0, [r7, #28]
 8004984:	f000 fe6e 	bl	8005664 <USBD_EpDesc>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	8afb      	ldrh	r3, [r7, #22]
 800498e:	4413      	add	r3, r2
 8004990:	82fb      	strh	r3, [r7, #22]
        dest[len - 1] = USBD_EpHsInterval(HID_APP(itf)->Report->Input.Interval_ms);
    }
    else
#endif /* (USBD_HS_SUPPORT == 1) */
    {
        dest[len - 1] = HID_APP(itf)->Report->Input.Interval_ms;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	8afb      	ldrh	r3, [r7, #22]
 800499a:	3b01      	subs	r3, #1
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	440b      	add	r3, r1
 80049a0:	7a12      	ldrb	r2, [r2, #8]
 80049a2:	701a      	strb	r2, [r3, #0]
            dest[len - 1] = HID_APP(itf)->Report->Output.Interval_ms;
        }
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    return len;
 80049a4:	8afb      	ldrh	r3, [r7, #22]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bdb0      	pop	{r4, r5, r7, pc}
 80049ae:	bf00      	nop
 80049b0:	08007008 	.word	0x08007008

080049b4 <hid_getString>:
 * @param itf: reference of the HID interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* hid_getString(USBD_HID_IfHandleType *itf, uint8_t intNum)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
        }
    }
    else
#endif /* USBD_HID_REPORT_STRINGS */
    {
        return itf->App->Name;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
    }
#endif /* USBD_HID_ALTSETTINGS */
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <hid_init>:
 *        resetting the internal variables
 *        and initializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_init(USBD_HID_IfHandleType *itf)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	613b      	str	r3, [r7, #16]
        mpsLimit = USB_EP_INTR_HS_MPS;
    }
    else
#endif
    {
        mpsLimit = USB_EP_INTR_FS_MPS;
 80049de:	2340      	movs	r3, #64	; 0x40
 80049e0:	81fb      	strh	r3, [r7, #14]
    }
    mps = HID_APP(itf)->Report->Input.MaxSize;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	895b      	ldrh	r3, [r3, #10]
 80049ea:	82fb      	strh	r3, [r7, #22]
    if (mps > mpsLimit)
 80049ec:	8afa      	ldrh	r2, [r7, #22]
 80049ee:	89fb      	ldrh	r3, [r7, #14]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d901      	bls.n	80049f8 <hid_init+0x28>
    {
        mps = mpsLimit;
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	82fb      	strh	r3, [r7, #22]
    }
    USBD_EpOpen(dev, itf->Config.InEpNum, USB_EP_TYPE_INTERRUPT, mps);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7c19      	ldrb	r1, [r3, #16]
 80049fc:	8afb      	ldrh	r3, [r7, #22]
 80049fe:	2203      	movs	r2, #3
 8004a00:	6938      	ldr	r0, [r7, #16]
 8004a02:	f7ff ff5b 	bl	80048bc <USBD_EpOpen>
        USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_INTERRUPT, mps);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Initialize state */
    itf->Request = 0;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	749a      	strb	r2, [r3, #18]
    itf->IdleRate = HID_APP(itf)->Report->Input.Interval_ms / 4;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	7a1b      	ldrb	r3, [r3, #8]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	745a      	strb	r2, [r3, #17]

    /* Initialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Init, itf);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <hid_init+0x60>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
}
 8004a30:	bf00      	nop
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <hid_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_deinit(USBD_HID_IfHandleType *itf)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]

    /* Close EPs */
    USBD_EpClose(dev, itf->Config.InEpNum);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	7c1b      	ldrb	r3, [r3, #16]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff ff54 	bl	80048fa <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Deinitialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Deinit, itf);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <hid_deinit+0x2e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <hid_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the HID interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType hid_setupStage(USBD_HID_IfHandleType *itf)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	77fb      	strb	r3, [r7, #31]
    USBD_HandleType *dev = itf->Base.Device;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	617b      	str	r3, [r7, #20]

    switch (dev->Setup.RequestType.Type)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	791b      	ldrb	r3, [r3, #4]
 8004a86:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <hid_setupStage+0x26>
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d035      	beq.n	8004b00 <hid_setupStage+0x90>
                    break;
            }
            break;
        }
        default:
            break;
 8004a94:	e0c6      	b.n	8004c24 <hid_setupStage+0x1b4>
            if (dev->Setup.Request == USB_REQ_GET_DESCRIPTOR)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	795b      	ldrb	r3, [r3, #5]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d12e      	bne.n	8004afc <hid_setupStage+0x8c>
                switch (dev->Setup.Value >> 8)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	88db      	ldrh	r3, [r3, #6]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b21      	cmp	r3, #33	; 0x21
 8004aa8:	d002      	beq.n	8004ab0 <hid_setupStage+0x40>
 8004aaa:	2b22      	cmp	r3, #34	; 0x22
 8004aac:	d017      	beq.n	8004ade <hid_setupStage+0x6e>
                        break;
 8004aae:	e026      	b.n	8004afe <hid_setupStage+0x8e>
                        void* data = dev->CtrlData;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8004ab6:	60fb      	str	r3, [r7, #12]
                        memcpy(dev->CtrlData, &hid_desc.HIDCD, sizeof(hid_desc.HIDCD));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f503 729a 	add.w	r2, r3, #308	; 0x134
 8004abe:	4b5c      	ldr	r3, [pc, #368]	; (8004c30 <hid_setupStage+0x1c0>)
 8004ac0:	3309      	adds	r3, #9
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	6859      	ldr	r1, [r3, #4]
 8004ac6:	6010      	str	r0, [r2, #0]
 8004ac8:	6051      	str	r1, [r2, #4]
 8004aca:	7a1b      	ldrb	r3, [r3, #8]
 8004acc:	7213      	strb	r3, [r2, #8]
                        retval = USBD_CtrlSendData(dev, data, sizeof(hid_desc.HIDCD));
 8004ace:	2209      	movs	r2, #9
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	6978      	ldr	r0, [r7, #20]
 8004ad4:	f000 fb88 	bl	80051e8 <USBD_CtrlSendData>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	77fb      	strb	r3, [r7, #31]
                        break;
 8004adc:	e00f      	b.n	8004afe <hid_setupStage+0x8e>
                                (void*)HID_APP(itf)->Report->Desc,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	6819      	ldr	r1, [r3, #0]
                                HID_APP(itf)->Report->DescLength);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
                        retval = USBD_CtrlSendData(dev,
 8004aec:	889b      	ldrh	r3, [r3, #4]
 8004aee:	461a      	mov	r2, r3
 8004af0:	6978      	ldr	r0, [r7, #20]
 8004af2:	f000 fb79 	bl	80051e8 <USBD_CtrlSendData>
 8004af6:	4603      	mov	r3, r0
 8004af8:	77fb      	strb	r3, [r7, #31]
                        break;
 8004afa:	e000      	b.n	8004afe <hid_setupStage+0x8e>
            }
 8004afc:	bf00      	nop
            break;
 8004afe:	e091      	b.n	8004c24 <hid_setupStage+0x1b4>
            uint8_t reportId = (uint8_t)dev->Setup.Value;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	88db      	ldrh	r3, [r3, #6]
 8004b04:	74fb      	strb	r3, [r7, #19]
            USBD_HID_ReportType reportType = dev->Setup.Value >> 8;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	88db      	ldrh	r3, [r3, #6]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	74bb      	strb	r3, [r7, #18]
            switch (dev->Setup.Request)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	795b      	ldrb	r3, [r3, #5]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	2b09      	cmp	r3, #9
 8004b18:	f200 8082 	bhi.w	8004c20 <hid_setupStage+0x1b0>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <hid_setupStage+0xb4>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	08004bb7 	.word	0x08004bb7
 8004b2c:	08004c21 	.word	0x08004c21
 8004b30:	08004c21 	.word	0x08004c21
 8004b34:	08004c21 	.word	0x08004c21
 8004b38:	08004c21 	.word	0x08004c21
 8004b3c:	08004c21 	.word	0x08004c21
 8004b40:	08004c21 	.word	0x08004c21
 8004b44:	08004b85 	.word	0x08004b85
 8004b48:	08004bd7 	.word	0x08004bd7
                    itf->Request = reportType;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7cba      	ldrb	r2, [r7, #18]
 8004b50:	749a      	strb	r2, [r3, #18]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->GetReport,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <hid_setupStage+0xfe>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	7c92      	ldrb	r2, [r2, #18]
 8004b66:	b2d1      	uxtb	r1, r2
 8004b68:	7cfa      	ldrb	r2, [r7, #19]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
                    if (itf->Request == 0)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7c9b      	ldrb	r3, [r3, #18]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <hid_setupStage+0x10c>
                    {   retval = USBD_E_OK; }
 8004b78:	2300      	movs	r3, #0
 8004b7a:	77fb      	strb	r3, [r7, #31]
                    itf->Request = 0;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	749a      	strb	r2, [r3, #18]
                    break;
 8004b82:	e04e      	b.n	8004c22 <hid_setupStage+0x1b2>
                    if (reportType == HID_REPORT_OUTPUT)
 8004b84:	7cbb      	ldrb	r3, [r7, #18]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d105      	bne.n	8004b96 <hid_setupStage+0x126>
                        max_len = HID_APP(itf)->Report->Output.MaxSize;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	8a1b      	ldrh	r3, [r3, #16]
 8004b92:	83bb      	strh	r3, [r7, #28]
 8004b94:	e004      	b.n	8004ba0 <hid_setupStage+0x130>
                        max_len = HID_APP(itf)->Report->Feature.MaxSize;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	899b      	ldrh	r3, [r3, #12]
 8004b9e:	83bb      	strh	r3, [r7, #28]
                    retval = USBD_CtrlReceiveData(dev, dev->CtrlData, max_len);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8004ba6:	8bba      	ldrh	r2, [r7, #28]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f000 fb4a 	bl	8005244 <USBD_CtrlReceiveData>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	77fb      	strb	r3, [r7, #31]
                    break;
 8004bb4:	e035      	b.n	8004c22 <hid_setupStage+0x1b2>
                    dev->CtrlData[0] = itf->IdleRate;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7c5a      	ldrb	r2, [r3, #17]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
                            dev->CtrlData, sizeof(itf->IdleRate));
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f503 739a 	add.w	r3, r3, #308	; 0x134
                    retval = USBD_CtrlSendData(dev,
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6978      	ldr	r0, [r7, #20]
 8004bcc:	f000 fb0c 	bl	80051e8 <USBD_CtrlSendData>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	77fb      	strb	r3, [r7, #31]
                    break;
 8004bd4:	e025      	b.n	8004c22 <hid_setupStage+0x1b2>
                    uint16_t idleRate_ms = HID_IDLE_RATE_INDEFINITE;
 8004bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bda:	837b      	strh	r3, [r7, #26]
                    uint8_t idleRate = dev->Setup.Value >> 8;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	88db      	ldrh	r3, [r3, #6]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	747b      	strb	r3, [r7, #17]
                    if (reportId == 0)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <hid_setupStage+0x182>
                    {   itf->IdleRate = idleRate; }
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7c7a      	ldrb	r2, [r7, #17]
 8004bf0:	745a      	strb	r2, [r3, #17]
                    if (idleRate > 0)
 8004bf2:	7c7b      	ldrb	r3, [r7, #17]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <hid_setupStage+0x192>
                    {   idleRate_ms = 4 * itf->IdleRate; }
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	7c5b      	ldrb	r3, [r3, #17]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	837b      	strh	r3, [r7, #26]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->SetIdle,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <hid_setupStage+0x1aa>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	7cfa      	ldrb	r2, [r7, #19]
 8004c14:	8b79      	ldrh	r1, [r7, #26]
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4798      	blx	r3
                    retval = USBD_E_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	77fb      	strb	r3, [r7, #31]
                    break;
 8004c1e:	e000      	b.n	8004c22 <hid_setupStage+0x1b2>
                    break;
 8004c20:	bf00      	nop
            break;
 8004c22:	bf00      	nop
    }
    return retval;
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	08007008 	.word	0x08007008

08004c34 <hid_dataStage>:
/**
 * @brief Passes the received set report to the application.
 * @param itf: reference of the HID interface
 */
static void hid_dataStage(USBD_HID_IfHandleType *itf)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]

    if (dev->Setup.Request == HID_REQ_SET_REPORT)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	795b      	ldrb	r3, [r3, #5]
 8004c46:	2b09      	cmp	r3, #9
 8004c48:	d11b      	bne.n	8004c82 <hid_dataStage+0x4e>
    {
        itf->Request = dev->Setup.Value >> 8;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	88db      	ldrh	r3, [r3, #6]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	749a      	strb	r2, [r3, #18]
        USBD_SAFE_CALLBACK(HID_APP(itf)->SetReport, itf, itf->Request,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <hid_dataStage+0x48>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	691c      	ldr	r4, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	7c9b      	ldrb	r3, [r3, #18]
 8004c6c:	b2d9      	uxtb	r1, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 729a 	add.w	r2, r3, #308	; 0x134
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	895b      	ldrh	r3, [r3, #10]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	47a0      	blx	r4
                dev->CtrlData, dev->Setup.Length);
        itf->Request = 0;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	749a      	strb	r2, [r3, #18]
    }
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd90      	pop	{r4, r7, pc}

08004c8a <hid_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the HID interface
 * @param ep: reference to the endpoint structure
 */
static void hid_inData(USBD_HID_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(HID_APP(itf)->InReportSent, itf,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <hid_inData+0x2e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	6811      	ldr	r1, [r2, #0]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	8892      	ldrh	r2, [r2, #4]
 8004cac:	4252      	negs	r2, r2
 8004cae:	440a      	add	r2, r1
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
            *(ep->Transfer.Data - ep->Transfer.Length));
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <USBD_HID_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_HID_MountInterface(USBD_HID_IfHandleType *itf, USBD_HandleType *dev)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]

    if (dev->IfCount < USBD_MAX_IF_COUNT)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d83a      	bhi.n	8004d4e <USBD_HID_MountInterface+0x8e>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &hid_cbks;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <USBD_HID_MountInterface+0x98>)
 8004ce2:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	721a      	strb	r2, [r3, #8]

        {
            USBD_EpHandleType *ep;

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7c1b      	ldrb	r3, [r3, #16]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6838      	ldr	r0, [r7, #0]
 8004cf8:	f7ff fdc2 	bl	8004880 <USBD_EpAddr2Ref>
 8004cfc:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_INTERRUPT;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2203      	movs	r2, #3
 8004d02:	729a      	strb	r2, [r3, #10]
            ep->IfNum           = dev->IfCount;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	731a      	strb	r2, [r3, #12]
            ep->MaxPacketSize   = HID_APP(itf)->Report->Input.MaxSize;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	895a      	ldrh	r2, [r3, #10]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	811a      	strh	r2, [r3, #8]
            if (ep->MaxPacketSize > HID_EP_MPS)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	891b      	ldrh	r3, [r3, #8]
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d902      	bls.n	8004d28 <USBD_HID_MountInterface+0x68>
            {
                ep->MaxPacketSize = HID_EP_MPS;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2240      	movs	r2, #64	; 0x40
 8004d26:	811a      	strh	r2, [r3, #8]
                }
            }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	330a      	adds	r3, #10
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d40:	3301      	adds	r3, #1
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	0800701c 	.word	0x0800701c

08004d5c <USBD_HID_ReportIn>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_HID_ReportIn(USBD_HID_IfHandleType *itf, void *data, uint16_t length)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval;
    USBD_HandleType *dev = itf->Base.Device;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	61bb      	str	r3, [r7, #24]
    uint8_t reportId = (uint8_t)dev->Setup.Value;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	88db      	ldrh	r3, [r3, #6]
 8004d74:	75fb      	strb	r3, [r7, #23]

    /* If the function is invoked in the EP0 GetReport() callback context,
     * and the report ID matches, use EP0 to transfer the report */
    if ((itf->Request != 0) &&
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	7c9b      	ldrb	r3, [r3, #18]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d013      	beq.n	8004da8 <USBD_HID_ReportIn+0x4c>
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <USBD_HID_ReportIn+0x34>
        ((reportId == 0) || (reportId == ((uint8_t*)data)[0])))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	7dfa      	ldrb	r2, [r7, #23]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d10b      	bne.n	8004da8 <USBD_HID_ReportIn+0x4c>
    {
        retval = USBD_CtrlSendData(dev, data, length);
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	461a      	mov	r2, r3
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f000 fa26 	bl	80051e8 <USBD_CtrlSendData>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	77fb      	strb	r3, [r7, #31]
        itf->Request = 0;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	749a      	strb	r2, [r3, #18]
 8004da6:	e008      	b.n	8004dba <USBD_HID_ReportIn+0x5e>
    }
    else
    {
        retval = USBD_EpSend(dev, itf->Config.InEpNum, data, length);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	7c19      	ldrb	r1, [r3, #16]
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	69b8      	ldr	r0, [r7, #24]
 8004db2:	f000 fcc5 	bl	8005740 <USBD_EpSend>
 8004db6:	4603      	mov	r3, r0
 8004db8:	77fb      	strb	r3, [r7, #31]
    }
    return retval;
 8004dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8004de2:	f36f 0341 	bfc	r3, #1, #1
 8004de6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	799b      	ldrb	r3, [r3, #6]
 8004df0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004df4:	b2d9      	uxtb	r1, r3
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8004dfc:	f361 0300 	bfi	r3, r1, #0, #1
 8004e00:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2240      	movs	r2, #64	; 0x40
 8004e08:	879a      	strh	r2, [r3, #60]	; 0x3c
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2240      	movs	r2, #64	; 0x40
 8004e0e:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 f92f 	bl	800607c <USB_vInit>
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 f96c 	bl	800610c <USB_vStart_IT>
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <USBD_ResetCallback>:
 *         - Resets any previously active configuration
 * @param dev: USB Device handle reference
 * @param speed: The new device speed
 */
void USBD_ResetCallback(USBD_HandleType *dev, USB_SpeedType speed)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
    dev->Speed = speed;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Reset any previous configuration */
    USBD_IfConfig(dev, 0);
 8004e50:	2100      	movs	r1, #0
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fdc7 	bl	80059e6 <USBD_IfConfig>
        }
    }
#endif

    /* Open control endpoint to start data transfers */
    USBD_PD_CtrlEpOpen(dev);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 f98d 	bl	8006178 <USB_vCtrlEpOpen>
    dev->EP.OUT[0].State = USB_EP_STATE_IDLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <USBD_SetAddress>:
 * @brief This function checks the SET_ADDRESS request's validity.
 * @param dev: USB Device handle reference: USB Device handle reference
 * @return OK if the request is accepted, INVALID otherwise
 */
static USBD_ReturnType USBD_SetAddress(USBD_HandleType *dev)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8004e76:	2303      	movs	r3, #3
 8004e78:	73fb      	strb	r3, [r7, #15]

    /* The request is only valid when not configured yet */
    if ((dev->Setup.Index    == 0) &&
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	891b      	ldrh	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <USBD_SetAddress+0x2a>
        (dev->Setup.Length   == 0) &&
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	895b      	ldrh	r3, [r3, #10]
    if ((dev->Setup.Index    == 0) &&
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <USBD_SetAddress+0x2a>
        (dev->ConfigSelector == 0))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (dev->Setup.Length   == 0) &&
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <USBD_SetAddress+0x2a>
#if (USBD_SET_ADDRESS_IMMEDIATE == 1)
        USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
#endif
        /* Address is accepted, it will be applied
         * after this Ctrl transfer is complete */
        retval = USBD_E_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <USBD_SetConfig>:
 * @brief This function switches to the requested configuration.
 * @param dev: USB Device handle reference
 * @return OK if the configuration is available, INVALID otherwise
 */
static USBD_ReturnType USBD_SetConfig(USBD_HandleType *dev)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8004eac:	2303      	movs	r3, #3
 8004eae:	73fb      	strb	r3, [r7, #15]
    uint8_t cfgNum = (uint8_t)dev->Setup.Value;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	88db      	ldrh	r3, [r3, #6]
 8004eb4:	73bb      	strb	r3, [r7, #14]

    if (cfgNum <= USBD_MAX_CONFIGURATION_COUNT)
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d806      	bhi.n	8004eca <USBD_SetConfig+0x26>
    {
        USBD_IfConfig(dev, cfgNum);
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fd90 	bl	80059e6 <USBD_IfConfig>

        retval = USBD_E_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <USBD_GetConfig>:
 * @brief This function sends the current configuration index on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetConfig(USBD_HandleType *dev)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
    dev->CtrlData[0] = dev->ConfigSelector;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    return USBD_CtrlSendData(dev, dev->CtrlData, sizeof(dev->ConfigSelector));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8004eee:	2201      	movs	r2, #1
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f978 	bl	80051e8 <USBD_CtrlSendData>
 8004ef8:	4603      	mov	r3, r0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USBD_GetStatus>:
 * @brief This function sends the device feature status on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetStatus(USBD_HandleType *dev)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
    uint16_t *devStatus = (uint16_t*)dev->CtrlData;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8004f10:	60fb      	str	r3, [r7, #12]
    *devStatus = dev->Features.w;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	801a      	strh	r2, [r3, #0]
    return USBD_CtrlSendData(dev, devStatus, sizeof(*devStatus));
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	68f9      	ldr	r1, [r7, #12]
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f962 	bl	80051e8 <USBD_CtrlSendData>
 8004f24:	4603      	mov	r3, r0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <USBD_SetFeature>:
 * @brief This function enables the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_SetFeature(USBD_HandleType *dev)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8004f36:	2303      	movs	r3, #3
 8004f38:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	88db      	ldrh	r3, [r3, #6]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d108      	bne.n	8004f54 <USBD_SetFeature+0x26>
    {
        dev->Features.RemoteWakeup = 1;
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <USBD_ClearFeature>:
 * @brief This function clears the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_ClearFeature(USBD_HandleType *dev)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	88db      	ldrh	r3, [r3, #6]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d108      	bne.n	8004f86 <USBD_ClearFeature+0x26>
    {
        dev->Features.RemoteWakeup = 0;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8004f7a:	f36f 0341 	bfc	r3, #1, #1
 8004f7e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
	...

08004f94 <USBD_DevRequest>:
 * @brief This function handles standard device requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_DevRequest(USBD_HandleType *dev)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	73fb      	strb	r3, [r7, #15]

    /* On device level only (the below) standard requests are supported */
    if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	791b      	ldrb	r3, [r3, #4]
 8004fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d144      	bne.n	8005038 <USBD_DevRequest+0xa4>
    {
        switch (dev->Setup.Request)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	795b      	ldrb	r3, [r3, #5]
 8004fb2:	2b09      	cmp	r3, #9
 8004fb4:	d842      	bhi.n	800503c <USBD_DevRequest+0xa8>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <USBD_DevRequest+0x28>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08005015 	.word	0x08005015
 8004fc0:	0800502d 	.word	0x0800502d
 8004fc4:	0800503d 	.word	0x0800503d
 8004fc8:	08005021 	.word	0x08005021
 8004fcc:	0800503d 	.word	0x0800503d
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08004fe5 	.word	0x08004fe5
 8004fd8:	0800503d 	.word	0x0800503d
 8004fdc:	08005009 	.word	0x08005009
 8004fe0:	08004ffd 	.word	0x08004ffd
        {
            case USB_REQ_GET_DESCRIPTOR:
                retval = USBD_GetDescriptor(dev);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 faa9 	bl	800553c <USBD_GetDescriptor>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
                break;
 8004fee:	e026      	b.n	800503e <USBD_DevRequest+0xaa>

            case USB_REQ_SET_ADDRESS:
                retval = USBD_SetAddress(dev);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff3c 	bl	8004e6e <USBD_SetAddress>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73fb      	strb	r3, [r7, #15]
                break;
 8004ffa:	e020      	b.n	800503e <USBD_DevRequest+0xaa>

            case USB_REQ_SET_CONFIGURATION:
                retval = USBD_SetConfig(dev);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff51 	bl	8004ea4 <USBD_SetConfig>
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]
                break;
 8005006:	e01a      	b.n	800503e <USBD_DevRequest+0xaa>

            case USB_REQ_GET_CONFIGURATION:
                retval = USBD_GetConfig(dev);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ff63 	bl	8004ed4 <USBD_GetConfig>
 800500e:	4603      	mov	r3, r0
 8005010:	73fb      	strb	r3, [r7, #15]
                break;
 8005012:	e014      	b.n	800503e <USBD_DevRequest+0xaa>

            case USB_REQ_GET_STATUS:
                retval = USBD_GetStatus(dev);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff74 	bl	8004f02 <USBD_GetStatus>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]
                break;
 800501e:	e00e      	b.n	800503e <USBD_DevRequest+0xaa>

            case USB_REQ_SET_FEATURE:
                retval = USBD_SetFeature(dev);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff84 	bl	8004f2e <USBD_SetFeature>
 8005026:	4603      	mov	r3, r0
 8005028:	73fb      	strb	r3, [r7, #15]
                break;
 800502a:	e008      	b.n	800503e <USBD_DevRequest+0xaa>

            case USB_REQ_CLEAR_FEATURE:
                retval = USBD_ClearFeature(dev);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff97 	bl	8004f60 <USBD_ClearFeature>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]
                break;
 8005036:	e002      	b.n	800503e <USBD_DevRequest+0xaa>

            default:
                break;
        }
    }
 8005038:	bf00      	nop
 800503a:	e000      	b.n	800503e <USBD_DevRequest+0xaa>
                break;
 800503c:	bf00      	nop
#endif /* (USBD_MS_OS_DESC_VERSION == 2) */
                break;
        }
    }
#endif /* (USBD_MS_OS_DESC_VERSION > 0) */
    return retval;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <USBD_IfClass_DataStage>:
 *        @ref USBD_ClassType::DataStage function.
 * @param itf: reference of the interface
 */
static inline void USBD_IfClass_DataStage(
        USBD_IfHandleType *itf)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->DataStage, itf);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <USBD_IfClass_DataStage+0x1c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <USBD_CtrlSendError>:
/**
 * @brief This function indicates a failed control request by stalling EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendError(USBD_HandleType *dev)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    USBD_PD_EpSetStall(dev, 0x80);
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f001 fb58 	bl	800672c <USB_vEpSetStall>
    dev->EP.IN [0].State = USB_EP_STATE_STALL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    USBD_PD_EpSetStall(dev, 0x00);
 8005084:	2100      	movs	r1, #0
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f001 fb50 	bl	800672c <USB_vEpSetStall>
    dev->EP.OUT[0].State = USB_EP_STATE_STALL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBD_CtrlSendStatus>:
/**
 * @brief This function indicates a successful control data OUT stage by sending ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendStatus(USBD_HandleType *dev)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
    dev->EP.IN[0].State = USB_EP_STATE_STATUS;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2205      	movs	r2, #5
 80050a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    USBD_PD_EpSend(dev, 0x80, NULL, 0);
 80050ac:	2300      	movs	r3, #0
 80050ae:	2200      	movs	r2, #0
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 fc24 	bl	8006900 <USB_vEpSend>
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <USBD_CtrlReceiveStatus>:
/**
 * @brief This function indicates a successful control data IN stage by receiving ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlReceiveStatus(USBD_HandleType *dev)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
    dev->EP.OUT[0].State = USB_EP_STATE_STATUS;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2205      	movs	r2, #5
 80050cc:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
    USBD_PD_EpReceive(dev, 0x00, NULL, 0);
 80050d0:	2300      	movs	r3, #0
 80050d2:	2200      	movs	r2, #0
 80050d4:	2100      	movs	r1, #0
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 fc36 	bl	8006948 <USB_vEpReceive>
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <USBD_CtrlInCallback>:
 *         - Provide completion callback and OUT status stage if it was a data stage
 *         - Set device address if it was requested
 * @param dev: USB Device handle reference
 */
void USBD_CtrlInCallback(USBD_HandleType *dev)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
    /* Last packet is MPS multiple, so send ZLP packet */
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	895b      	ldrh	r3, [r3, #10]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d215      	bcs.n	8005124 <USBD_CtrlInCallback+0x40>
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8005100:	429a      	cmp	r2, r3
 8005102:	d30f      	bcc.n	8005124 <USBD_CtrlInCallback+0x40>
        ((dev->EP.IN[0].Transfer.Length & (dev->EP.IN[0].MaxPacketSize - 1)) == 0))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005108:	461a      	mov	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800510e:	3b01      	subs	r3, #1
 8005110:	4013      	ands	r3, r2
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <USBD_CtrlInCallback+0x40>
    {
        USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8005116:	2300      	movs	r3, #0
 8005118:	2200      	movs	r2, #0
 800511a:	2180      	movs	r1, #128	; 0x80
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f001 fbef 	bl	8006900 <USB_vEpSend>
        {
            USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
        }
#endif
    }
}
 8005122:	e037      	b.n	8005194 <USBD_CtrlInCallback+0xb0>
        dev->EP.IN[0].State = USB_EP_STATE_IDLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	791b      	ldrb	r3, [r3, #4]
 8005130:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <USBD_CtrlInCallback+0x8c>
            if ((dev->ConfigSelector != 0) &&
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005140:	2b00      	cmp	r3, #0
 8005142:	d011      	beq.n	8005168 <USBD_CtrlInCallback+0x84>
                (dev->Setup.RequestType.Recipient == USB_REQ_RECIPIENT_INTERFACE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	791b      	ldrb	r3, [r3, #4]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	b2db      	uxtb	r3, r3
            if ((dev->ConfigSelector != 0) &&
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10a      	bne.n	8005168 <USBD_CtrlInCallback+0x84>
                USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	891b      	ldrh	r3, [r3, #8]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	330a      	adds	r3, #10
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff70 	bl	8005048 <USBD_IfClass_DataStage>
            USBD_CtrlReceiveStatus(dev);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ffa9 	bl	80050c0 <USBD_CtrlReceiveStatus>
}
 800516e:	e011      	b.n	8005194 <USBD_CtrlInCallback+0xb0>
        else if ((dev->Setup.RequestType.b == 0x00) &&
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	791b      	ldrb	r3, [r3, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <USBD_CtrlInCallback+0xb0>
                 (dev->Setup.Request == USB_REQ_SET_ADDRESS))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	795b      	ldrb	r3, [r3, #5]
        else if ((dev->Setup.RequestType.b == 0x00) &&
 800517c:	2b05      	cmp	r3, #5
 800517e:	d109      	bne.n	8005194 <USBD_CtrlInCallback+0xb0>
            USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	88db      	ldrh	r3, [r3, #6]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 ffdc 	bl	800614c <USB_vSetAddress>
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <USBD_CtrlOutCallback>:
 * @brief This function manages the end of a control OUT endpoint transfer:
 *         - Provide completion callback and IN status stage if it was a data stage
 * @param dev: USB Device handle reference
 */
void USBD_CtrlOutCallback(USBD_HandleType *dev)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    /* If the callback is from a Data stage */
    if ((dev->Setup.Length > 0) &&
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	895b      	ldrh	r3, [r3, #10]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d019      	beq.n	80051e0 <USBD_CtrlOutCallback+0x44>
        (dev->Setup.RequestType.Direction == USB_DIRECTION_OUT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051b4:	b2db      	uxtb	r3, r3
    if ((dev->Setup.Length > 0) &&
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d112      	bne.n	80051e0 <USBD_CtrlOutCallback+0x44>
    {
        /* Standard requests have no OUT direction data stage -> must be IF related */
        if (dev->ConfigSelector != 0)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <USBD_CtrlOutCallback+0x3e>
        {
            /* If callback for received EP0 data */
            USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	891b      	ldrh	r3, [r3, #8]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	330a      	adds	r3, #10
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff ff37 	bl	8005048 <USBD_IfClass_DataStage>
        }

        /* Proceed to Status stage */
        USBD_CtrlSendStatus(dev);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff ff5e 	bl	800509c <USBD_CtrlSendStatus>
    }
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	791b      	ldrb	r3, [r3, #4]
 80051fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d018      	beq.n	800523a <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 800520e:	2b03      	cmp	r3, #3
 8005210:	d113      	bne.n	800523a <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	895b      	ldrh	r3, [r3, #10]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	429a      	cmp	r2, r3
 800521a:	d902      	bls.n	8005222 <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	895b      	ldrh	r3, [r3, #10]
 8005220:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2204      	movs	r2, #4
 8005226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	2180      	movs	r1, #128	; 0x80
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f001 fb65 	bl	8006900 <USB_vEpSend>

        retval = USBD_E_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	791b      	ldrb	r3, [r3, #4]
 800525a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d118      	bne.n	8005296 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 800526a:	2b03      	cmp	r3, #3
 800526c:	d113      	bne.n	8005296 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	895b      	ldrh	r3, [r3, #10]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	429a      	cmp	r2, r3
 8005276:	d902      	bls.n	800527e <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	895b      	ldrh	r3, [r3, #10]
 800527c:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2204      	movs	r2, #4
 8005282:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	2100      	movs	r1, #0
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f001 fb5b 	bl	8006948 <USB_vEpReceive>

        retval = USBD_E_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <USBD_SetupCallback>:
 *        and performs the endpoint's status stage if no data stage is requested
 *        or the request wasn't accepted.
 * @param dev: USB Device handle reference
 */
void USBD_SetupCallback(USBD_HandleType *dev)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80052a8:	2303      	movs	r3, #3
 80052aa:	73fb      	strb	r3, [r7, #15]

    dev->EP.OUT[0].State = USB_EP_STATE_SETUP;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf

    /* Route the request to the recipient */
    switch (dev->Setup.RequestType.Recipient)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	791b      	ldrb	r3, [r3, #4]
 80052b8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d012      	beq.n	80052e8 <USBD_SetupCallback+0x48>
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	dc16      	bgt.n	80052f4 <USBD_SetupCallback+0x54>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <USBD_SetupCallback+0x30>
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d006      	beq.n	80052dc <USBD_SetupCallback+0x3c>
        case USB_REQ_RECIPIENT_ENDPOINT:
            retval = USBD_EpRequest(dev);
            break;

        default:
            break;
 80052ce:	e011      	b.n	80052f4 <USBD_SetupCallback+0x54>
            retval = USBD_DevRequest(dev);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff fe5f 	bl	8004f94 <USBD_DevRequest>
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
            break;
 80052da:	e00c      	b.n	80052f6 <USBD_SetupCallback+0x56>
            retval = USBD_IfRequest(dev);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fbfd 	bl	8005adc <USBD_IfRequest>
 80052e2:	4603      	mov	r3, r0
 80052e4:	73fb      	strb	r3, [r7, #15]
            break;
 80052e6:	e006      	b.n	80052f6 <USBD_SetupCallback+0x56>
            retval = USBD_EpRequest(dev);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fa96 	bl	800581a <USBD_EpRequest>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
            break;
 80052f2:	e000      	b.n	80052f6 <USBD_SetupCallback+0x56>
            break;
 80052f4:	bf00      	nop
    }

    /* If the request was rejected, send Request Error (EP0 STALL) */
    if (retval != USBD_E_OK)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <USBD_SetupCallback+0x64>
    {
        USBD_CtrlSendError(dev);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff feb5 	bl	800506c <USBD_CtrlSendError>
    }
    else
    {
        /* Data stage starts in the requested direction */
    }
}
 8005302:	e006      	b.n	8005312 <USBD_SetupCallback+0x72>
    else if (dev->Setup.Length == 0)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	895b      	ldrh	r3, [r3, #10]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <USBD_SetupCallback+0x72>
        USBD_CtrlSendStatus(dev);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fec5 	bl	800509c <USBD_CtrlSendStatus>
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <USBD_EpAddr2Ref>:
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8005326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800532a:	2b00      	cmp	r3, #0
 800532c:	da08      	bge.n	8005340 <USBD_EpAddr2Ref+0x26>
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	3303      	adds	r3, #3
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	3304      	adds	r3, #4
 800533e:	e005      	b.n	800534c <USBD_EpAddr2Ref+0x32>
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	330b      	adds	r3, #11
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	3304      	adds	r3, #4
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <USBD_IfClass_GetDesc>:
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	460b      	mov	r3, r1
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	72fb      	strb	r3, [r7, #11]
    if (itf->Class->GetDescriptor != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <USBD_IfClass_GetDesc+0x2a>
        { return itf->Class->GetDescriptor(itf, ifNum, dest); }
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	7af9      	ldrb	r1, [r7, #11]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	4798      	blx	r3
 800537c:	4603      	mov	r3, r0
 800537e:	e000      	b.n	8005382 <USBD_IfClass_GetDesc+0x2c>
        { return 0; }
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <USBD_DeviceDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the device descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_DeviceDesc(USBD_HandleType *dev, uint8_t *data)
{
 800538c:	b4b0      	push	{r4, r5, r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
    USB_DeviceDescType *desc = (USB_DeviceDescType*)data;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	60fb      	str	r3, [r7, #12]

    memcpy(data, &usbd_deviceDesc, sizeof(USB_DeviceDescType));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <USBD_DeviceDesc+0x5c>)
 800539e:	461d      	mov	r5, r3
 80053a0:	4614      	mov	r4, r2
 80053a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a4:	6028      	str	r0, [r5, #0]
 80053a6:	6069      	str	r1, [r5, #4]
 80053a8:	60aa      	str	r2, [r5, #8]
 80053aa:	60eb      	str	r3, [r5, #12]
 80053ac:	8823      	ldrh	r3, [r4, #0]
 80053ae:	822b      	strh	r3, [r5, #16]

    desc->bMaxPacketSize = dev->EP.OUT[0].MaxPacketSize;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	71da      	strb	r2, [r3, #7]
    desc->idVendor       = dev->Desc->Vendor.ID;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	899a      	ldrh	r2, [r3, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	811a      	strh	r2, [r3, #8]
    desc->idProduct      = dev->Desc->Product.ID;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	8a9a      	ldrh	r2, [r3, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	815a      	strh	r2, [r3, #10]
    desc->bcdDevice      = dev->Desc->Product.Version.bcd;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	8ada      	ldrh	r2, [r3, #22]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	819a      	strh	r2, [r3, #12]

    return sizeof(USB_DeviceDescType);
 80053da:	2312      	movs	r3, #18
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bcb0      	pop	{r4, r5, r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	08007040 	.word	0x08007040

080053ec <USBD_ConfigDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_ConfigDesc(USBD_HandleType *dev, uint8_t *data)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
    USB_ConfigDescType *desc = (USB_ConfigDescType*)data;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
    uint16_t wTotalLength = sizeof(USB_ConfigDescType);
 80053fa:	2309      	movs	r3, #9
 80053fc:	82fb      	strh	r3, [r7, #22]
    uint8_t ifNum;
    USBD_IfHandleType *itf = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]

    /* Get the individual interface descriptors */
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8005402:	2300      	movs	r3, #0
 8005404:	757b      	strb	r3, [r7, #21]
 8005406:	e021      	b.n	800544c <USBD_ConfigDesc+0x60>
    {
        /* Associated interfaces return the entire descriptor */
        if (dev->IF[ifNum] == itf) { continue; }
 8005408:	7d7b      	ldrb	r3, [r7, #21]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	330a      	adds	r3, #10
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d014      	beq.n	8005444 <USBD_ConfigDesc+0x58>

        itf = dev->IF[ifNum];
 800541a:	7d7b      	ldrb	r3, [r7, #21]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	330a      	adds	r3, #10
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	613b      	str	r3, [r7, #16]
        wTotalLength += USBD_IfClass_GetDesc(itf, ifNum, &data[wTotalLength]);
 8005428:	8afb      	ldrh	r3, [r7, #22]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	441a      	add	r2, r3
 800542e:	7d7b      	ldrb	r3, [r7, #21]
 8005430:	4619      	mov	r1, r3
 8005432:	6938      	ldr	r0, [r7, #16]
 8005434:	f7ff ff8f 	bl	8005356 <USBD_IfClass_GetDesc>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	8afb      	ldrh	r3, [r7, #22]
 800543e:	4413      	add	r3, r2
 8005440:	82fb      	strh	r3, [r7, #22]
 8005442:	e000      	b.n	8005446 <USBD_ConfigDesc+0x5a>
        if (dev->IF[ifNum] == itf) { continue; }
 8005444:	bf00      	nop
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8005446:	7d7b      	ldrb	r3, [r7, #21]
 8005448:	3301      	adds	r3, #1
 800544a:	757b      	strb	r3, [r7, #21]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005452:	7d7a      	ldrb	r2, [r7, #21]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3d7      	bcc.n	8005408 <USBD_ConfigDesc+0x1c>
    }

    /* Get the configuration descriptor */
    desc->bLength               = sizeof(USB_ConfigDescType);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2209      	movs	r2, #9
 800545c:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType       = USB_DESC_TYPE_CONFIGURATION;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2202      	movs	r2, #2
 8005462:	705a      	strb	r2, [r3, #1]
    desc->wTotalLength          = wTotalLength;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8afa      	ldrh	r2, [r7, #22]
 8005468:	805a      	strh	r2, [r3, #2]
    desc->bNumInterfaces        = dev->IfCount;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	711a      	strb	r2, [r3, #4]
    desc->bConfigurationValue   = 1;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	715a      	strb	r2, [r3, #5]
    desc->iConfiguration        = USBD_ISTR_CONFIG;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2240      	movs	r2, #64	; 0x40
 800547e:	719a      	strb	r2, [r3, #6]
    desc->bmAttributes          = 0x80 | dev->Desc->Config.b;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	799b      	ldrb	r3, [r3, #6]
 8005486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	71da      	strb	r2, [r3, #7]
    desc->bMaxPower             = dev->Desc->Config.MaxCurrent_mA / 2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	889b      	ldrh	r3, [r3, #4]
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	b29b      	uxth	r3, r3
 800549a:	b2da      	uxtb	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	721a      	strb	r2, [r3, #8]

    return wTotalLength;
 80054a0:	8afb      	ldrh	r3, [r7, #22]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <USBD_GetStringDesc>:
 * @param str: the input ASCII string
 * @param data: the target container for the string descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_GetStringDesc(const char *str, uint8_t *data)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b087      	sub	sp, #28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
    uint16_t *dst = (uint16_t*)&data[2];
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	3302      	adds	r3, #2
 80054b8:	617b      	str	r3, [r7, #20]
    data[0] = 2;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]
    data[1] = USB_DESC_TYPE_STRING;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	2203      	movs	r2, #3
 80054c6:	701a      	strb	r2, [r3, #0]

    /* If ASCII, convert to Unicode */
    if (str[1] != 0)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3301      	adds	r3, #1
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d016      	beq.n	8005500 <USBD_GetStringDesc+0x56>
    {
        uint8_t  *src = (uint8_t*)str;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	613b      	str	r3, [r7, #16]
        while (*src != 0)
 80054d6:	e00e      	b.n	80054f6 <USBD_GetStringDesc+0x4c>
        {
            *dst++ = (uint16_t)*src++;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	613a      	str	r2, [r7, #16]
 80054de:	7819      	ldrb	r1, [r3, #0]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	1c9a      	adds	r2, r3, #2
 80054e4:	617a      	str	r2, [r7, #20]
 80054e6:	b28a      	uxth	r2, r1
 80054e8:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	3302      	adds	r3, #2
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ec      	bne.n	80054d8 <USBD_GetStringDesc+0x2e>
 80054fe:	e014      	b.n	800552a <USBD_GetStringDesc+0x80>
        }
    }
    else /* If Unicode already, just copy */
    {
        uint16_t *src = (uint16_t*)str;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]
        while (*src != 0)
 8005504:	e00d      	b.n	8005522 <USBD_GetStringDesc+0x78>
        {
            *dst++ = *src++;
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	1c93      	adds	r3, r2, #2
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	1c99      	adds	r1, r3, #2
 8005510:	6179      	str	r1, [r7, #20]
 8005512:	8812      	ldrh	r2, [r2, #0]
 8005514:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	3302      	adds	r3, #2
 800551c:	b2da      	uxtb	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ed      	bne.n	8005506 <USBD_GetStringDesc+0x5c>
        }
    }
    return data[0];
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
	...

0800553c <USBD_GetDescriptor>:
 * @brief This function collects and transfers the requested descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetDescriptor(USBD_HandleType *dev)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005544:	2303      	movs	r3, #3
 8005546:	75fb      	strb	r3, [r7, #23]

    uint16_t len = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	82bb      	strh	r3, [r7, #20]
    uint8_t *data = dev->CtrlData;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8005552:	613b      	str	r3, [r7, #16]

    /* High byte identifies descriptor type */
    switch (dev->Setup.Value >> 8)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	88db      	ldrh	r3, [r3, #6]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b03      	cmp	r3, #3
 800555e:	d014      	beq.n	800558a <USBD_GetDescriptor+0x4e>
 8005560:	2b03      	cmp	r3, #3
 8005562:	dc6b      	bgt.n	800563c <USBD_GetDescriptor+0x100>
 8005564:	2b01      	cmp	r3, #1
 8005566:	d002      	beq.n	800556e <USBD_GetDescriptor+0x32>
 8005568:	2b02      	cmp	r3, #2
 800556a:	d007      	beq.n	800557c <USBD_GetDescriptor+0x40>
            break;
        }
#endif /* (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2) */

        default:
            break;
 800556c:	e066      	b.n	800563c <USBD_GetDescriptor+0x100>
            len = USBD_DeviceDesc(dev, data);
 800556e:	6939      	ldr	r1, [r7, #16]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ff0b 	bl	800538c <USBD_DeviceDesc>
 8005576:	4603      	mov	r3, r0
 8005578:	82bb      	strh	r3, [r7, #20]
            break;
 800557a:	e060      	b.n	800563e <USBD_GetDescriptor+0x102>
            len = USBD_ConfigDesc(dev, data);
 800557c:	6939      	ldr	r1, [r7, #16]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ff34 	bl	80053ec <USBD_ConfigDesc>
 8005584:	4603      	mov	r3, r0
 8005586:	82bb      	strh	r3, [r7, #20]
            break;
 8005588:	e059      	b.n	800563e <USBD_GetDescriptor+0x102>
            switch (dev->Setup.Value & 0xFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	88db      	ldrh	r3, [r3, #6]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d027      	beq.n	80055e4 <USBD_GetDescriptor+0xa8>
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	dc42      	bgt.n	800561e <USBD_GetDescriptor+0xe2>
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d02d      	beq.n	80055f8 <USBD_GetDescriptor+0xbc>
 800559c:	2b30      	cmp	r3, #48	; 0x30
 800559e:	dc3e      	bgt.n	800561e <USBD_GetDescriptor+0xe2>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d015      	beq.n	80055d0 <USBD_GetDescriptor+0x94>
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	dc3a      	bgt.n	800561e <USBD_GetDescriptor+0xe2>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <USBD_GetDescriptor+0x76>
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d005      	beq.n	80055bc <USBD_GetDescriptor+0x80>
 80055b0:	e035      	b.n	800561e <USBD_GetDescriptor+0xe2>
                    data = (uint8_t*)&usbd_langIdDesc;
 80055b2:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <USBD_GetDescriptor+0x124>)
 80055b4:	613b      	str	r3, [r7, #16]
                    len  = sizeof(usbd_langIdDesc);
 80055b6:	2304      	movs	r3, #4
 80055b8:	82bb      	strh	r3, [r7, #20]
                    break;
 80055ba:	e03e      	b.n	800563a <USBD_GetDescriptor+0xfe>
                    len = USBD_GetStringDesc(dev->Desc->Vendor.Name, data);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	6939      	ldr	r1, [r7, #16]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff70 	bl	80054aa <USBD_GetStringDesc>
 80055ca:	4603      	mov	r3, r0
 80055cc:	82bb      	strh	r3, [r7, #20]
                    break;
 80055ce:	e034      	b.n	800563a <USBD_GetDescriptor+0xfe>
                    len = USBD_GetStringDesc(dev->Desc->Product.Name, data);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	6939      	ldr	r1, [r7, #16]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff ff66 	bl	80054aa <USBD_GetStringDesc>
 80055de:	4603      	mov	r3, r0
 80055e0:	82bb      	strh	r3, [r7, #20]
                    break;
 80055e2:	e02a      	b.n	800563a <USBD_GetDescriptor+0xfe>
                    len = USBD_GetStringDesc(dev->Desc->Config.Name, data);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6939      	ldr	r1, [r7, #16]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff ff5c 	bl	80054aa <USBD_GetStringDesc>
 80055f2:	4603      	mov	r3, r0
 80055f4:	82bb      	strh	r3, [r7, #20]
                    break;
 80055f6:	e020      	b.n	800563a <USBD_GetDescriptor+0xfe>
                    data[0] = len = 2 + USBD_SERIAL_BCD_SIZE * 2;
 80055f8:	231a      	movs	r3, #26
 80055fa:	82bb      	strh	r3, [r7, #20]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	221a      	movs	r2, #26
 8005600:	701a      	strb	r2, [r3, #0]
                    data[1] = USB_DESC_TYPE_STRING;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	3301      	adds	r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	701a      	strb	r2, [r3, #0]
                    Uint2Unicode((const uint8_t*)dev->Desc->SerialNumber,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6998      	ldr	r0, [r3, #24]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3302      	adds	r3, #2
 8005614:	220c      	movs	r2, #12
 8005616:	4619      	mov	r1, r3
 8005618:	f000 fab9 	bl	8005b8e <Uint2Unicode>
                    break;
 800561c:	e00d      	b.n	800563a <USBD_GetDescriptor+0xfe>
                    const char* str = USBD_IfString(dev);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa31 	bl	8005a86 <USBD_IfString>
 8005624:	60f8      	str	r0, [r7, #12]
                    if (str != NULL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <USBD_GetDescriptor+0xfc>
                        len = USBD_GetStringDesc(str, data);
 800562c:	6939      	ldr	r1, [r7, #16]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff ff3b 	bl	80054aa <USBD_GetStringDesc>
 8005634:	4603      	mov	r3, r0
 8005636:	82bb      	strh	r3, [r7, #20]
                    break;
 8005638:	bf00      	nop
            break;
 800563a:	e000      	b.n	800563e <USBD_GetDescriptor+0x102>
            break;
 800563c:	bf00      	nop
    }

    /* Transfer the non-null descriptor */
    if (len > 0)
 800563e:	8abb      	ldrh	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <USBD_GetDescriptor+0x118>
    {
        retval = USBD_CtrlSendData(dev, data, len);
 8005644:	8abb      	ldrh	r3, [r7, #20]
 8005646:	461a      	mov	r2, r3
 8005648:	6939      	ldr	r1, [r7, #16]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fdcc 	bl	80051e8 <USBD_CtrlSendData>
 8005650:	4603      	mov	r3, r0
 8005652:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8005654:	7dfb      	ldrb	r3, [r7, #23]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	0800703c 	.word	0x0800703c

08005664 <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	460b      	mov	r3, r1
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8005672:	7afb      	ldrb	r3, [r7, #11]
 8005674:	4619      	mov	r1, r3
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fe4f 	bl	800531a <USBD_EpAddr2Ref>
 800567c:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2207      	movs	r2, #7
 8005686:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2205      	movs	r2, #5
 800568c:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	7afa      	ldrb	r2, [r7, #11]
 8005692:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	7a9a      	ldrb	r2, [r3, #10]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	891a      	ldrh	r2, [r3, #8]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2201      	movs	r2, #1
 80056a8:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 80056aa:	2307      	movs	r3, #7
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USBD_EpAddr2Ref>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 80056c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da08      	bge.n	80056da <USBD_EpAddr2Ref+0x26>
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	3303      	adds	r3, #3
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	3304      	adds	r3, #4
 80056d8:	e005      	b.n	80056e6 <USBD_EpAddr2Ref+0x32>
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	330b      	adds	r3, #11
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	3304      	adds	r3, #4
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <USBD_IfClass_InData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_InData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->InData, itf, ep);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <USBD_IfClass_InData+0x20>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4798      	blx	r3
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBD_IfClass_OutData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_OutData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->OutData, itf, ep);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <USBD_IfClass_OutData+0x20>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	4798      	blx	r3
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	461a      	mov	r2, r3
 800574c:	460b      	mov	r3, r1
 800574e:	72fb      	strb	r3, [r7, #11]
 8005750:	4613      	mov	r3, r2
 8005752:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8005754:	2302      	movs	r3, #2
 8005756:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	3303      	adds	r3, #3
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	3304      	adds	r3, #4
 8005768:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	7adb      	ldrb	r3, [r3, #11]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d003      	beq.n	800577a <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10a      	bne.n	8005790 <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2204      	movs	r2, #4
 800577e:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 8005780:	893b      	ldrh	r3, [r7, #8]
 8005782:	7af9      	ldrb	r1, [r7, #11]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f001 f8ba 	bl	8006900 <USB_vEpSend>

        retval = USBD_E_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <USBD_EpInCallback>:
 *        of the completion of an IN endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB IN endpoint handle reference
 */
void USBD_EpInCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
    if (ep == &dev->EP.IN[0])
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3334      	adds	r3, #52	; 0x34
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d103      	bne.n	80057b6 <USBD_EpInCallback+0x1c>
    {
        USBD_CtrlInCallback(dev);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fc98 	bl	80050e4 <USBD_CtrlInCallback>
    else
    {
        ep->State = USB_EP_STATE_IDLE;
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
    }
}
 80057b4:	e00d      	b.n	80057d2 <USBD_EpInCallback+0x38>
        ep->State = USB_EP_STATE_IDLE;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2201      	movs	r2, #1
 80057ba:	72da      	strb	r2, [r3, #11]
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	7b1b      	ldrb	r3, [r3, #12]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	330a      	adds	r3, #10
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ff8f 	bl	80056f0 <USBD_IfClass_InData>
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <USBD_EpOutCallback>:
 *        of the completion of an OUT endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB OUT endpoint handle reference
 */
void USBD_EpOutCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
    ep->State = USB_EP_STATE_IDLE;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	72da      	strb	r2, [r3, #11]

    if (ep == &dev->EP.OUT[0])
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	33b4      	adds	r3, #180	; 0xb4
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d103      	bne.n	80057fc <USBD_EpOutCallback+0x22>
    {
        USBD_CtrlOutCallback(dev);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fcd1 	bl	800519c <USBD_CtrlOutCallback>
    }
    else
    {
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
    }
}
 80057fa:	e00a      	b.n	8005812 <USBD_EpOutCallback+0x38>
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	7b1b      	ldrb	r3, [r3, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	330a      	adds	r3, #10
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff ff83 	bl	8005718 <USBD_IfClass_OutData>
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <USBD_EpRequest>:
 * @brief This function handles standard endpoint requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_EpRequest(USBD_HandleType *dev)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b086      	sub	sp, #24
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005822:	2303      	movs	r3, #3
 8005824:	75fb      	strb	r3, [r7, #23]
    uint8_t epAddr = (uint8_t)dev->Setup.Index, epNum = epAddr & 0xF;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	891b      	ldrh	r3, [r3, #8]
 800582a:	75bb      	strb	r3, [r7, #22]
 800582c:	7dbb      	ldrb	r3, [r7, #22]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	757b      	strb	r3, [r7, #21]

    if ((epNum >= USBD_MAX_EP_COUNT) ||
 8005834:	7d7b      	ldrb	r3, [r7, #21]
 8005836:	2b07      	cmp	r3, #7
 8005838:	d87e      	bhi.n	8005938 <USBD_EpRequest+0x11e>
 800583a:	7d7b      	ldrb	r3, [r7, #21]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d07b      	beq.n	8005938 <USBD_EpRequest+0x11e>
        (epNum == 0) ||
        (dev->ConfigSelector == 0))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (epNum == 0) ||
 8005846:	2b00      	cmp	r3, #0
 8005848:	d076      	beq.n	8005938 <USBD_EpRequest+0x11e>
    {
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	791b      	ldrb	r3, [r3, #4]
 800584e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d16f      	bne.n	8005938 <USBD_EpRequest+0x11e>
    {
        USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8005858:	7dbb      	ldrb	r3, [r7, #22]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff29 	bl	80056b4 <USBD_EpAddr2Ref>
 8005862:	6138      	str	r0, [r7, #16]

        switch (dev->Setup.Request)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	795b      	ldrb	r3, [r3, #5]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d006      	beq.n	800587a <USBD_EpRequest+0x60>
 800586c:	2b03      	cmp	r3, #3
 800586e:	dc5e      	bgt.n	800592e <USBD_EpRequest+0x114>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d046      	beq.n	8005902 <USBD_EpRequest+0xe8>
 8005874:	2b01      	cmp	r3, #1
 8005876:	d013      	beq.n	80058a0 <USBD_EpRequest+0x86>
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
                break;
            }

            default:
                break;
 8005878:	e059      	b.n	800592e <USBD_EpRequest+0x114>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	88db      	ldrh	r3, [r3, #6]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d157      	bne.n	8005932 <USBD_EpRequest+0x118>
                    retval = USBD_E_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]
                    if (ep->State != USB_EP_STATE_STALL)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	7adb      	ldrb	r3, [r3, #11]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d051      	beq.n	8005932 <USBD_EpRequest+0x118>
                        USBD_PD_EpSetStall(dev, epAddr);
 800588e:	7dbb      	ldrb	r3, [r7, #22]
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 ff4a 	bl	800672c <USB_vEpSetStall>
                        ep->State = USB_EP_STATE_STALL;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2202      	movs	r2, #2
 800589c:	72da      	strb	r2, [r3, #11]
                break;
 800589e:	e048      	b.n	8005932 <USBD_EpRequest+0x118>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	88db      	ldrh	r3, [r3, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d146      	bne.n	8005936 <USBD_EpRequest+0x11c>
                    retval = USBD_E_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
                    if (ep->State == USB_EP_STATE_STALL)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	7adb      	ldrb	r3, [r3, #11]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d140      	bne.n	8005936 <USBD_EpRequest+0x11c>
                        USBD_PD_EpClearStall(dev, epAddr);
 80058b4:	7dbb      	ldrb	r3, [r7, #22]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 ff8d 	bl	80067d8 <USB_vEpClearStall>
                        ep->State = USB_EP_STATE_IDLE;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2201      	movs	r2, #1
 80058c2:	72da      	strb	r2, [r3, #11]
                        ep->Transfer.Length = 0;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2200      	movs	r2, #0
 80058c8:	809a      	strh	r2, [r3, #4]
                        if (epAddr != epNum)
 80058ca:	7dba      	ldrb	r2, [r7, #22]
 80058cc:	7d7b      	ldrb	r3, [r7, #21]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d00b      	beq.n	80058ea <USBD_EpRequest+0xd0>
                            USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	7b1b      	ldrb	r3, [r3, #12]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	330a      	adds	r3, #10
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	6939      	ldr	r1, [r7, #16]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff ff04 	bl	80056f0 <USBD_IfClass_InData>
                break;
 80058e8:	e025      	b.n	8005936 <USBD_EpRequest+0x11c>
                            USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	7b1b      	ldrb	r3, [r3, #12]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	330a      	adds	r3, #10
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	6939      	ldr	r1, [r7, #16]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff0c 	bl	8005718 <USBD_IfClass_OutData>
                break;
 8005900:	e019      	b.n	8005936 <USBD_EpRequest+0x11c>
                uint16_t *epStatus = (uint16_t*)dev->CtrlData;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8005908:	60fb      	str	r3, [r7, #12]
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	7adb      	ldrb	r3, [r3, #11]
                        1 << USB_FEATURE_EP_HALT : 0;
 800590e:	2b02      	cmp	r3, #2
 8005910:	bf0c      	ite	eq
 8005912:	2301      	moveq	r3, #1
 8005914:	2300      	movne	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	b29a      	uxth	r2, r3
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	801a      	strh	r2, [r3, #0]
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
 800591e:	2202      	movs	r2, #2
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fc60 	bl	80051e8 <USBD_CtrlSendData>
 8005928:	4603      	mov	r3, r0
 800592a:	75fb      	strb	r3, [r7, #23]
                break;
 800592c:	e004      	b.n	8005938 <USBD_EpRequest+0x11e>
                break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <USBD_EpRequest+0x11e>
                break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <USBD_EpRequest+0x11e>
                break;
 8005936:	bf00      	nop
        /* Callouts for class or vendor specific
         * EP request processing not implemented
         * Interface level requests are promoted (and supported) instead */
    }

    return retval;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <USBD_IfClass_GetString>:
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b082      	sub	sp, #8
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	70fb      	strb	r3, [r7, #3]
    if (itf->Class->GetString == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <USBD_IfClass_GetString+0x1a>
    {   return (const char*)NULL; }
 8005958:	2300      	movs	r3, #0
 800595a:	e007      	b.n	800596c <USBD_IfClass_GetString+0x2a>
    {   return itf->Class->GetString(itf, intNum); }
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	4611      	mov	r1, r2
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
 800596a:	4603      	mov	r3, r0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <USBD_IfClass_Init>:
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Init, itf);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <USBD_IfClass_Init+0x1c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <USBD_IfClass_Deinit>:
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Deinit, itf);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <USBD_IfClass_Deinit+0x1c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4798      	blx	r3
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_IfClass_SetupStage>:
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
    if (itf->Class->SetupStage == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <USBD_IfClass_SetupStage+0x16>
    {   return USBD_E_INVALID; }
 80059ce:	2303      	movs	r3, #3
 80059d0:	e005      	b.n	80059de <USBD_IfClass_SetupStage+0x22>
    {   return itf->Class->SetupStage(itf); }
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
 80059dc:	4603      	mov	r3, r0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <USBD_IfConfig>:
 * @brief This function changes the active device configuration.
 * @param dev: USB Device handle reference
 * @param cfgNum: New configuration selector index
 */
void USBD_IfConfig(USBD_HandleType *dev, uint8_t cfgNum)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70fb      	strb	r3, [r7, #3]
    if (dev->ConfigSelector != cfgNum)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059f8:	78fa      	ldrb	r2, [r7, #3]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d03f      	beq.n	8005a7e <USBD_IfConfig+0x98>
    {
        uint8_t ifNum;

        /* Clear any previously selected config */
        if (dev->ConfigSelector != 0)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01c      	beq.n	8005a42 <USBD_IfConfig+0x5c>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e013      	b.n	8005a36 <USBD_IfConfig+0x50>
            {
                USBD_IfClass_Deinit(dev->IF[ifNum]);
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	330a      	adds	r3, #10
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff ffbc 	bl	8005998 <USBD_IfClass_Deinit>
                dev->IF[ifNum]->AltSelector = 0;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	330a      	adds	r3, #10
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	721a      	strb	r2, [r3, #8]
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	3301      	adds	r3, #1
 8005a34:	73fb      	strb	r3, [r7, #15]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d3e5      	bcc.n	8005a0e <USBD_IfConfig+0x28>
            }
        }

        /* Update configuration index */
        dev->ConfigSelector = cfgNum;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* Set the new selected valid config */
        if (dev->ConfigSelector != 0)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d014      	beq.n	8005a7e <USBD_IfConfig+0x98>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]
 8005a58:	e00b      	b.n	8005a72 <USBD_IfConfig+0x8c>
            {
                USBD_IfClass_Init(dev->IF[ifNum]);
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	330a      	adds	r3, #10
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff84 	bl	8005974 <USBD_IfClass_Init>
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a78:	7bfa      	ldrb	r2, [r7, #15]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d3ed      	bcc.n	8005a5a <USBD_IfConfig+0x74>
            }
        }
    }
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USBD_IfString>:
 *        which is selected by the setup request.
 * @param dev: USB Device handle reference
 * @return Reference to the interface's string, or NULL if not available
 */
const char* USBD_IfString(USBD_HandleType *dev)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
    uint8_t ifNum  = ((uint8_t)dev->Setup.Value & 0xF) - USBD_ISTR_INTERFACES;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	88db      	ldrh	r3, [r3, #6]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	74fb      	strb	r3, [r7, #19]
    uint8_t intNum = ((uint8_t)dev->Setup.Value >> 4);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	88db      	ldrh	r3, [r3, #6]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	74bb      	strb	r3, [r7, #18]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	330a      	adds	r3, #10
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
    const char* str = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]

    if (ifNum < dev->IfCount)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ac0:	7cfa      	ldrb	r2, [r7, #19]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d205      	bcs.n	8005ad2 <USBD_IfString+0x4c>
    {
        str = USBD_IfClass_GetString(itf, intNum);
 8005ac6:	7cbb      	ldrb	r3, [r7, #18]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff ff39 	bl	8005942 <USBD_IfClass_GetString>
 8005ad0:	6178      	str	r0, [r7, #20]
    }

    return str;
 8005ad2:	697b      	ldr	r3, [r7, #20]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_IfRequest>:
 * @brief Processes the interface request.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_IfRequest(USBD_HandleType *dev)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	75fb      	strb	r3, [r7, #23]
    uint8_t ifNum = (uint8_t)dev->Setup.Index;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	891b      	ldrh	r3, [r3, #8]
 8005aec:	75bb      	strb	r3, [r7, #22]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	330a      	adds	r3, #10
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	613b      	str	r3, [r7, #16]

    if ((dev->ConfigSelector == 0) || (ifNum >= dev->IfCount))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d03e      	beq.n	8005b84 <USBD_IfRequest+0xa8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b0c:	7dba      	ldrb	r2, [r7, #22]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d238      	bcs.n	8005b84 <USBD_IfRequest+0xa8>
    {
        /* Configured and valid indexed interfaces only */
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	791b      	ldrb	r3, [r3, #4]
 8005b16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d12a      	bne.n	8005b76 <USBD_IfRequest+0x9a>
    {
        switch (dev->Setup.Request)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	795b      	ldrb	r3, [r3, #5]
 8005b24:	2b0a      	cmp	r3, #10
 8005b26:	d002      	beq.n	8005b2e <USBD_IfRequest+0x52>
 8005b28:	2b0b      	cmp	r3, #11
 8005b2a:	d00a      	beq.n	8005b42 <USBD_IfRequest+0x66>
 8005b2c:	e01d      	b.n	8005b6a <USBD_IfRequest+0x8e>
        {
            /* Current alternate setting of the IF */
            case USB_REQ_GET_INTERFACE:
            {
                retval = USBD_CtrlSendData(dev,
                        &itf->AltSelector, sizeof(itf->AltSelector));
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3308      	adds	r3, #8
                retval = USBD_CtrlSendData(dev,
 8005b32:	2201      	movs	r2, #1
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fb56 	bl	80051e8 <USBD_CtrlSendData>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	75fb      	strb	r3, [r7, #23]
                break;
 8005b40:	e020      	b.n	8005b84 <USBD_IfRequest+0xa8>
            }

            /* Set alternate setting of the IF */
            case USB_REQ_SET_INTERFACE:
            {
                uint8_t altSel = (uint8_t)dev->Setup.Value;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	88db      	ldrh	r3, [r3, #6]
 8005b46:	73fb      	strb	r3, [r7, #15]

                /* Check validity */
                if (itf->AltCount > altSel)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	7a5b      	ldrb	r3, [r3, #9]
 8005b4c:	7bfa      	ldrb	r2, [r7, #15]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d217      	bcs.n	8005b82 <USBD_IfRequest+0xa6>
                {
                    /* Deinit previous AS */
                    USBD_IfClass_Deinit(itf);
 8005b52:	6938      	ldr	r0, [r7, #16]
 8005b54:	f7ff ff20 	bl	8005998 <USBD_IfClass_Deinit>

                    itf->AltSelector = altSel;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	721a      	strb	r2, [r3, #8]

                    /* Init with new AS */
                    USBD_IfClass_Init(itf);
 8005b5e:	6938      	ldr	r0, [r7, #16]
 8005b60:	f7ff ff08 	bl	8005974 <USBD_IfClass_Init>

                    retval = USBD_E_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8005b68:	e00b      	b.n	8005b82 <USBD_IfRequest+0xa6>
            }

            default:
            {
                /* forward the request to the IF */
                retval = USBD_IfClass_SetupStage(itf);
 8005b6a:	6938      	ldr	r0, [r7, #16]
 8005b6c:	f7ff ff26 	bl	80059bc <USBD_IfClass_SetupStage>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]
                break;
 8005b74:	e006      	b.n	8005b84 <USBD_IfRequest+0xa8>
        }
    }
    else
    {
        /* forward the request to the IF */
        retval = USBD_IfClass_SetupStage(itf);
 8005b76:	6938      	ldr	r0, [r7, #16]
 8005b78:	f7ff ff20 	bl	80059bc <USBD_IfClass_SetupStage>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	75fb      	strb	r3, [r7, #23]
 8005b80:	e000      	b.n	8005b84 <USBD_IfRequest+0xa8>
                break;
 8005b82:	bf00      	nop
    }

    return retval;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <Uint2Unicode>:
 * @param data: address of raw data
 * @param unicode: Unicode string output
 * @param len: number of hexadecimal digits to output
 */
__weak void Uint2Unicode(const uint8_t *data, uint8_t *unicode, uint16_t len)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
    uint8_t i = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	75fb      	strb	r3, [r7, #23]

    len *= 2;
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	80fb      	strh	r3, [r7, #6]
    while (i < len)
 8005ba6:	e02e      	b.n	8005c06 <Uint2Unicode+0x78>
    {
        uint8_t val;

        if ((i & 2) == 0)
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <Uint2Unicode+0x2e>
        {
            val = *data >> 4;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	75bb      	strb	r3, [r7, #22]
 8005bba:	e007      	b.n	8005bcc <Uint2Unicode+0x3e>
        }
        else
        {
            val = *data & 0xF;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	75bb      	strb	r3, [r7, #22]
            data++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
        }

        if (val < 0xA)
 8005bcc:	7dbb      	ldrb	r3, [r7, #22]
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d807      	bhi.n	8005be2 <Uint2Unicode+0x54>
        {
            unicode[i] = '0' + val;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	7dba      	ldrb	r2, [r7, #22]
 8005bda:	3230      	adds	r2, #48	; 0x30
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	e006      	b.n	8005bf0 <Uint2Unicode+0x62>
        }
        else
        {
            unicode[i] = 'A' - 10 + val;
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	4413      	add	r3, r2
 8005be8:	7dba      	ldrb	r2, [r7, #22]
 8005bea:	3237      	adds	r2, #55	; 0x37
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
        unicode[i] = 0x00;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
        i++;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	3301      	adds	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
    while (i < len)
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d8cb      	bhi.n	8005ba8 <Uint2Unicode+0x1a>
    }

    /* Null termination not used by USB string descriptors */
    unicode[i++] = '\0';
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	75fa      	strb	r2, [r7, #23]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
    unicode[i] = 0x00;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <USB_prvWritePMA>:
    USB_EP_INTERRUPT
};

/* Writes user data to USB endpoint packet memory */
static void USB_prvWritePMA(uint8_t * pucSrcBuf, uint16_t usPmaAddress, uint16_t usDataCount)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	807b      	strh	r3, [r7, #2]
 8005c40:	4613      	mov	r3, r2
 8005c42:	803b      	strh	r3, [r7, #0]
    USB_PacketAddressType * pxDst = (USB_PacketAddressType *)USB_PMAADDR + (usPmaAddress / 2);
 8005c44:	887b      	ldrh	r3, [r7, #2]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c50:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005c54:	60fb      	str	r3, [r7, #12]
    uint16_t usWCount;

    /* Assemble halfwords and copy them to packet memory */
    for (usWCount = (usDataCount + 1) / 2; usWCount > 0; usWCount--)
 8005c56:	883b      	ldrh	r3, [r7, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	0fda      	lsrs	r2, r3, #31
 8005c5c:	4413      	add	r3, r2
 8005c5e:	105b      	asrs	r3, r3, #1
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	e012      	b.n	8005c8a <USB_prvWritePMA+0x56>
    {
        *pxDst = ((uint16_t)(pucSrcBuf[1]) << 8) | (uint16_t)(pucSrcBuf[0]);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3301      	adds	r3, #1
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	461a      	mov	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	601a      	str	r2, [r3, #0]
        pxDst++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	60fb      	str	r3, [r7, #12]
        pucSrcBuf += 2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3302      	adds	r3, #2
 8005c82:	607b      	str	r3, [r7, #4]
    for (usWCount = (usDataCount + 1) / 2; usWCount > 0; usWCount--)
 8005c84:	897b      	ldrh	r3, [r7, #10]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	817b      	strh	r3, [r7, #10]
 8005c8a:	897b      	ldrh	r3, [r7, #10]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e9      	bne.n	8005c64 <USB_prvWritePMA+0x30>
    }
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <USB_prvReadPMA>:

/* Reads USB endpoint data from packet memory */
static void USB_prvReadPMA(uint8_t * pucDstBuf, uint16_t usPmaAddress, uint16_t usDataCount)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	803b      	strh	r3, [r7, #0]
    USB_PacketAddressType * pxSrc = (USB_PacketAddressType *)USB_PMAADDR + (usPmaAddress / 2);
 8005cac:	887b      	ldrh	r3, [r7, #2]
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cb8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005cbc:	60fb      	str	r3, [r7, #12]
    uint16_t usWCount;

    /* Copy each halfword into the byte buffer */
    for (usWCount = usDataCount / 2; usWCount > 0; usWCount--)
 8005cbe:	883b      	ldrh	r3, [r7, #0]
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	817b      	strh	r3, [r7, #10]
 8005cc4:	e018      	b.n	8005cf8 <USB_prvReadPMA+0x5c>
    {
        uint16_t usData = *pxSrc;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	813b      	strh	r3, [r7, #8]
        *pucDstBuf = usData;
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	701a      	strb	r2, [r3, #0]
        pucDstBuf++;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
        *pucDstBuf = usData >> 8;
 8005cda:	893b      	ldrh	r3, [r7, #8]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	701a      	strb	r2, [r3, #0]
        pucDstBuf++;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	607b      	str	r3, [r7, #4]
        pxSrc++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]
    for (usWCount = usDataCount / 2; usWCount > 0; usWCount--)
 8005cf2:	897b      	ldrh	r3, [r7, #10]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	817b      	strh	r3, [r7, #10]
 8005cf8:	897b      	ldrh	r3, [r7, #10]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e3      	bne.n	8005cc6 <USB_prvReadPMA+0x2a>
    }

    /* The last, unaligned byte is filled if exists */
    if ((usDataCount & 1) != 0)
 8005cfe:	883b      	ldrh	r3, [r7, #0]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <USB_prvReadPMA+0x76>
    {
        *pucDstBuf = (uint8_t)*pxSrc;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	701a      	strb	r2, [r3, #0]
    }
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <USB_prvConvertRxCount>:

/* Setting RX_COUNT requires special conversion */
static uint16_t USB_prvConvertRxCount(uint16_t usRxCount)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	80fb      	strh	r3, [r7, #6]
    uint16_t usBlocks;
    if(usRxCount > 62)
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b3e      	cmp	r3, #62	; 0x3e
 8005d2a:	d90f      	bls.n	8005d4c <USB_prvConvertRxCount+0x30>
    {
        /* Rx count to blocks of 32 */
        usBlocks = ((usRxCount + 31) >> 5) - 1;
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	331f      	adds	r3, #31
 8005d30:	115b      	asrs	r3, r3, #5
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	81fb      	strh	r3, [r7, #14]
        usBlocks = USB_RXCNT_BL_SIZE | (usBlocks << USB_RXCNT_NUM_BLOCK_Pos);
 8005d38:	89fb      	ldrh	r3, [r7, #14]
 8005d3a:	029b      	lsls	r3, r3, #10
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d46:	b21b      	sxth	r3, r3
 8005d48:	81fb      	strh	r3, [r7, #14]
 8005d4a:	e006      	b.n	8005d5a <USB_prvConvertRxCount+0x3e>
    }
    else
    {
        /* Rx count to blocks of 2 */
        usBlocks = (usRxCount + 1) >> 1;
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	105b      	asrs	r3, r3, #1
 8005d52:	81fb      	strh	r3, [r7, #14]
        usBlocks = (usBlocks << USB_RXCNT_NUM_BLOCK_Pos);
 8005d54:	89fb      	ldrh	r3, [r7, #14]
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	81fb      	strh	r3, [r7, #14]
    }
    return usBlocks;
 8005d5a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <USB_prvNextPacketSize>:

/* Determines the next packet size based on the transfer progress and the EP MPS */
static uint16_t USB_prvNextPacketSize(USB_EndPointHandleType * pxEP)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
    uint16_t usPacketLength;

    /* Multi packet transfer */
    if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	88da      	ldrh	r2, [r3, #6]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	891b      	ldrh	r3, [r3, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d90b      	bls.n	8005d92 <USB_prvNextPacketSize+0x2c>
    {
        pxEP->Transfer.Progress -= pxEP->MaxPacketSize;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	88da      	ldrh	r2, [r3, #6]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	891b      	ldrh	r3, [r3, #8]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	80da      	strh	r2, [r3, #6]
        usPacketLength = pxEP->MaxPacketSize;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	891b      	ldrh	r3, [r3, #8]
 8005d8e:	81fb      	strh	r3, [r7, #14]
 8005d90:	e005      	b.n	8005d9e <USB_prvNextPacketSize+0x38>
    }
    else
    {
        usPacketLength = pxEP->Transfer.Progress;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	88db      	ldrh	r3, [r3, #6]
 8005d96:	81fb      	strh	r3, [r7, #14]
        pxEP->Transfer.Progress = 0;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	80da      	strh	r2, [r3, #6]
    }

    return usPacketLength;
 8005d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr
	...

08005dac <USB_prvReceivePacket>:

/* Handle OUT EP transfer */
static void USB_prvReceivePacket(USB_HandleType * pxUSB, USB_EndPointHandleType * pxEP)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
    uint16_t usPacketLength = USB_prvConvertRxCount(USB_prvNextPacketSize(pxEP));
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f7ff ffd5 	bl	8005d66 <USB_prvNextPacketSize>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff ffac 	bl	8005d1c <USB_prvConvertRxCount>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	81fb      	strh	r3, [r7, #14]

    /* Double buffering */
    if (USB_EP_DOUBLE_BUFFERED(pxEP) && ((USB->EPR[pxEP->RegId].w & USB_EP_DTOG_RX) == 0))
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	7a9b      	ldrb	r3, [r3, #10]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d113      	bne.n	8005df8 <USB_prvReceivePacket+0x4c>
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <USB_prvReceivePacket+0x94>)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	7b5b      	ldrb	r3, [r3, #13]
 8005dd6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <USB_prvReceivePacket+0x4c>
    {
        /* Set endpoint buffer 0 count */
        USB_EP_BDT[pxEP->RegId].TX_COUNT = usPacketLength;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	7b5b      	ldrb	r3, [r3, #13]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005df2:	89fa      	ldrh	r2, [r7, #14]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	e008      	b.n	8005e0a <USB_prvReceivePacket+0x5e>
    }
    else
    {
        /*Set RX buffer count */
        USB_EP_BDT[pxEP->RegId].RX_COUNT = usPacketLength;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	7b5b      	ldrb	r3, [r3, #13]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005e06:	89fa      	ldrh	r2, [r7, #14]
 8005e08:	60da      	str	r2, [r3, #12]
    }

    USB_EP_SET_STATUS(pxEP->RegId, RX, VALID);
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <USB_prvReceivePacket+0x94>)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	7b5b      	ldrb	r3, [r3, #13]
 8005e10:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	4906      	ldr	r1, [pc, #24]	; (8005e40 <USB_prvReceivePacket+0x94>)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	7b5b      	ldrb	r3, [r3, #13]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <USB_prvReceivePacket+0x98>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40005c00 	.word	0x40005c00
 8005e44:	ffff8080 	.word	0xffff8080

08005e48 <USB_prvTransmitPacket>:

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, USB_EndPointHandleType * pxEP)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
    uint16_t usPmaAddress = USB_EP_BDT[pxEP->RegId].TX_ADDR;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	7b5b      	ldrb	r3, [r3, #13]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	81fb      	strh	r3, [r7, #14]
    uint16_t usPacketLength = USB_prvNextPacketSize(pxEP);
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	f7ff ff7e 	bl	8005d66 <USB_prvNextPacketSize>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	81bb      	strh	r3, [r7, #12]

    if (!USB_EP_DOUBLE_BUFFERED(pxEP))
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	7a9b      	ldrb	r3, [r3, #10]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d027      	beq.n	8005ec6 <USB_prvTransmitPacket+0x7e>
    {
        USB_EP_BDT[pxEP->RegId].TX_COUNT = usPacketLength;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	7b5b      	ldrb	r3, [r3, #13]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005e84:	89ba      	ldrh	r2, [r7, #12]
 8005e86:	605a      	str	r2, [r3, #4]

        /* Write the data to the packet memory */
        USB_prvWritePMA(pxEP->Transfer.Data, usPmaAddress, usPacketLength);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	89ba      	ldrh	r2, [r7, #12]
 8005e8e:	89f9      	ldrh	r1, [r7, #14]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fecf 	bl	8005c34 <USB_prvWritePMA>

        /* Validate Tx endpoint */
        USB_EP_SET_STATUS(pxEP->RegId, TX, VALID);
 8005e96:	4a37      	ldr	r2, [pc, #220]	; (8005f74 <USB_prvTransmitPacket+0x12c>)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	7b5b      	ldrb	r3, [r3, #13]
 8005e9c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	4930      	ldr	r1, [pc, #192]	; (8005f74 <USB_prvTransmitPacket+0x12c>)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	7b5b      	ldrb	r3, [r3, #13]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	4b2f      	ldr	r3, [pc, #188]	; (8005f78 <USB_prvTransmitPacket+0x130>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        if (USB->EPR[pxEP->RegId].b.DTOG_TX == USB->EPR[pxEP->RegId].b.DTOG_RX)
        {
            USB_TOGGLE(pxEP->RegId, DTOG_RX);
        }
    }
}
 8005ec4:	e051      	b.n	8005f6a <USB_prvTransmitPacket+0x122>
        if ((USB->EPR[pxEP->RegId].w & USB_EP_DTOG_TX) != 0)
 8005ec6:	4a2b      	ldr	r2, [pc, #172]	; (8005f74 <USB_prvTransmitPacket+0x12c>)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	7b5b      	ldrb	r3, [r3, #13]
 8005ecc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d012      	beq.n	8005f00 <USB_prvTransmitPacket+0xb8>
            USB_EP_BDT[pxEP->RegId].RX_COUNT = usPacketLength;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	7b5b      	ldrb	r3, [r3, #13]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ee4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005ee8:	89ba      	ldrh	r2, [r7, #12]
 8005eea:	60da      	str	r2, [r3, #12]
            usPmaAddress = USB_EP_BDT[pxEP->RegId].RX_ADDR;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	7b5b      	ldrb	r3, [r3, #13]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	81fb      	strh	r3, [r7, #14]
 8005efe:	e008      	b.n	8005f12 <USB_prvTransmitPacket+0xca>
            USB_EP_BDT[pxEP->RegId].TX_COUNT = usPacketLength;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	7b5b      	ldrb	r3, [r3, #13]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005f0e:	89ba      	ldrh	r2, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]
        USB_prvWritePMA(pxEP->Transfer.Data, usPmaAddress, usPacketLength);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	89ba      	ldrh	r2, [r7, #12]
 8005f18:	89f9      	ldrh	r1, [r7, #14]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fe8a 	bl	8005c34 <USB_prvWritePMA>
        if (USB->EPR[pxEP->RegId].b.DTOG_TX == USB->EPR[pxEP->RegId].b.DTOG_RX)
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <USB_prvTransmitPacket+0x12c>)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	7b5b      	ldrb	r3, [r3, #13]
 8005f26:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005f2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	4910      	ldr	r1, [pc, #64]	; (8005f74 <USB_prvTransmitPacket+0x12c>)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	7b5b      	ldrb	r3, [r3, #13]
 8005f36:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8005f3a:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d112      	bne.n	8005f6a <USB_prvTransmitPacket+0x122>
            USB_TOGGLE(pxEP->RegId, DTOG_RX);
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <USB_prvTransmitPacket+0x12c>)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	7b5b      	ldrb	r3, [r3, #13]
 8005f4a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005f54:	4013      	ands	r3, r2
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	4906      	ldr	r1, [pc, #24]	; (8005f74 <USB_prvTransmitPacket+0x12c>)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	7b5b      	ldrb	r3, [r3, #13]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <USB_prvTransmitPacket+0x134>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40005c00 	.word	0x40005c00
 8005f78:	ffff8080 	.word	0xffff8080
 8005f7c:	ffffc080 	.word	0xffffc080

08005f80 <USB_prvCtrlEpOpen>:

/* Opens EP0 bidirectional dedicated control endpoint */
static void USB_prvCtrlEpOpen(USB_HandleType * pxUSB)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
    /* Configure EP0 type; address */
    USB->EPR[0].w = (USB->EPR[0].w & USB_EP_T_MASK)
 8005f88:	4b37      	ldr	r3, [pc, #220]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4a33      	ldr	r2, [pc, #204]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
            | USB_EP_CONTROL;
 8005f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f9e:	b29b      	uxth	r3, r3
    USB->EPR[0].w = (USB->EPR[0].w & USB_EP_T_MASK)
 8005fa0:	8013      	strh	r3, [r2, #0]

    USB->EPR[0].w = (USB->EPR[0].w & USB_EPREG_MASK)
 8005fa2:	4b31      	ldr	r3, [pc, #196]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29a      	uxth	r2, r3
            | USB_EP_CTR_RX | USB_EP_CTR_TX | 0;
 8005fa8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005fac:	4013      	ands	r3, r2
 8005fae:	b29a      	uxth	r2, r3
    USB->EPR[0].w = (USB->EPR[0].w & USB_EPREG_MASK)
 8005fb0:	492d      	ldr	r1, [pc, #180]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
            | USB_EP_CTR_RX | USB_EP_CTR_TX | 0;
 8005fb2:	4b2e      	ldr	r3, [pc, #184]	; (800606c <USB_prvCtrlEpOpen+0xec>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	b29b      	uxth	r3, r3
    USB->EPR[0].w = (USB->EPR[0].w & USB_EPREG_MASK)
 8005fb8:	800b      	strh	r3, [r1, #0]

    /* IN direction */
    {
        /*Set the endpoint Transmit buffer address */
        USB_EP_BDT[0].TX_COUNT = 0;
 8005fba:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <USB_prvCtrlEpOpen+0xf0>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	605a      	str	r2, [r3, #4]

        USB_TOGGLE_CLEAR(0, DTOG_TX);
 8005fc0:	4b29      	ldr	r3, [pc, #164]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <USB_prvCtrlEpOpen+0x66>
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005fd8:	4013      	ands	r3, r2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	4922      	ldr	r1, [pc, #136]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <USB_prvCtrlEpOpen+0xf4>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	800b      	strh	r3, [r1, #0]

        /* Configure NAK status for the Endpoint */
        USB_EP_SET_STATUS(0, TX, NAK);
 8005fe6:	4b20      	ldr	r3, [pc, #128]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f083 0320 	eor.w	r3, r3, #32
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	491a      	ldr	r1, [pc, #104]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <USB_prvCtrlEpOpen+0xec>)
 8006000:	4313      	orrs	r3, r2
 8006002:	b29b      	uxth	r3, r3
 8006004:	800b      	strh	r3, [r1, #0]
    }
    /* OUT direction */
    {
        /* Set the endpoint Receive buffer address and counter */
        USB_EP_BDT[0].RX_COUNT = USB_prvConvertRxCount(pxUSB->EP.OUT[0].MaxPacketSize);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fe85 	bl	8005d1c <USB_prvConvertRxCount>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	4b16      	ldr	r3, [pc, #88]	; (8006070 <USB_prvCtrlEpOpen+0xf0>)
 8006018:	60da      	str	r2, [r3, #12]

        USB_TOGGLE_CLEAR(0, DTOG_RX);
 800601a:	4b13      	ldr	r3, [pc, #76]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <USB_prvCtrlEpOpen+0xc0>
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29a      	uxth	r2, r3
 800602e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006032:	4013      	ands	r3, r2
 8006034:	b29a      	uxth	r2, r3
 8006036:	490c      	ldr	r1, [pc, #48]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <USB_prvCtrlEpOpen+0xf8>)
 800603a:	4313      	orrs	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	800b      	strh	r3, [r1, #0]

        /* Configure VALID status for the Endpoint */
        USB_EP_SET_STATUS(0, RX, VALID);
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	b29b      	uxth	r3, r3
 8006050:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006054:	b29a      	uxth	r2, r3
 8006056:	4904      	ldr	r1, [pc, #16]	; (8006068 <USB_prvCtrlEpOpen+0xe8>)
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <USB_prvCtrlEpOpen+0xec>)
 800605a:	4313      	orrs	r3, r2
 800605c:	b29b      	uxth	r3, r3
 800605e:	800b      	strh	r3, [r1, #0]
    }
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40005c00 	.word	0x40005c00
 800606c:	ffff8080 	.word	0xffff8080
 8006070:	40006000 	.word	0x40006000
 8006074:	ffff80c0 	.word	0xffff80c0
 8006078:	ffffc080 	.word	0xffffc080

0800607c <USB_vInit>:
 * @brief Initializes the USB peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
    /* Enable peripheral clock */
    RCC_vClockEnable(RCC_POS_USB);
 8006086:	4b1f      	ldr	r3, [pc, #124]	; (8006104 <USB_vInit+0x88>)
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <USB_vInit+0x88>)
 800608c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006090:	6253      	str	r3, [r2, #36]	; 0x24
 8006092:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <USB_vInit+0x88>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2240      	movs	r2, #64	; 0x40
 80060a2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    pxUSB->EP.OUT[0].MaxPacketSize =
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    pxUSB->EP.OUT[0].Type =
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2203      	movs	r2, #3
 80060c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Initialize peripheral device */
    /* FRES = 1 */
    USB->CNTR.w = USB_CNTR_FRES;
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <USB_vInit+0x8c>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* FRES = 0 */
    USB->CNTR.w = 0;
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <USB_vInit+0x8c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /*Clear pending interrupts */
    USB->ISTR.w = 0;
 80060da:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <USB_vInit+0x8c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Set Btable Address */
    USB->BTABLE = USB_BTABLE_VALUE;
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <USB_vInit+0x8c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        CLEAR_BIT(USB->LPMCSR.w, USB_LPMCSR_LPMEN | USB_LPMCSR_LPMACK);
    }
#endif

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <USB_vInit+0x7e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40023800 	.word	0x40023800
 8006108:	40005c00 	.word	0x40005c00

0800610c <USB_vStart_IT>:
/**
 * @brief Starts the USB device operation with necessary interrupts.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vStart_IT(USB_HandleType * pxUSB)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
    /*Set interrupt mask */
    uint32_t ulCNTR = USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_RESETM;
 8006114:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8006118:	60fb      	str	r3, [r7, #12]
    {
        ulCNTR |= USB_CNTR_L1REQM;
    }
#endif
    /* Apply interrupts selection */
    USB->CNTR.w |= ulCNTR;
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <USB_vStart_IT+0x3c>)
 800611c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	b29b      	uxth	r3, r3
 8006126:	4908      	ldr	r1, [pc, #32]	; (8006148 <USB_vStart_IT+0x3c>)
 8006128:	4313      	orrs	r3, r2
 800612a:	b29b      	uxth	r3, r3
 800612c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40

    /* Activate DP line pull up */
#ifdef USB_BCDR_DPPU
    USB_REG_BIT(pxUSB,BCDR, DPPU) = 1;
#else
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.ConnectCtrl, ENABLE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <USB_vStart_IT+0x34>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2001      	movs	r0, #1
 800613e:	4798      	blx	r3
#endif
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40005c00 	.word	0x40005c00

0800614c <USB_vSetAddress>:
 * @brief Sets the USB device address.
 * @param pxUSB: pointer to the USB handle structure
 * @param Address: new device address
 */
void USB_vSetAddress(USB_HandleType * pxUSB, uint8_t ucAddress)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
    USB->DADDR.w = USB_DADDR_EF | ucAddress;
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800615e:	b2da      	uxtb	r2, r3
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <USB_vSetAddress+0x28>)
 8006162:	b292      	uxth	r2, r2
 8006164:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40005c00 	.word	0x40005c00

08006178 <USB_vCtrlEpOpen>:
/**
 * @brief Sets endpoint buffers and opens the default control endpoint.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vCtrlEpOpen(USB_HandleType * pxUSB)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
    /* Allocate packet memory for all used endpoints based on MPS */
    USB_vAllocateEPs(pxUSB);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fdc5 	bl	8006d10 <USB_vAllocateEPs>

    /* Open EP0 */
    USB_prvCtrlEpOpen(pxUSB);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fefa 	bl	8005f80 <USB_prvCtrlEpOpen>
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	70fb      	strb	r3, [r7, #3]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70bb      	strb	r3, [r7, #2]
 80061aa:	4613      	mov	r3, r2
 80061ac:	803b      	strh	r3, [r7, #0]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 80061ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da08      	bge.n	80061c8 <USB_vEpOpen+0x34>
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	3303      	adds	r3, #3
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4413      	add	r3, r2
 80061c4:	3304      	adds	r3, #4
 80061c6:	e005      	b.n	80061d4 <USB_vEpOpen+0x40>
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	330b      	adds	r3, #11
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4413      	add	r3, r2
 80061d2:	3304      	adds	r3, #4
 80061d4:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	72fb      	strb	r3, [r7, #11]

    pxEP->MaxPacketSize = usMaxPacketSize;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	883a      	ldrh	r2, [r7, #0]
 80061e2:	811a      	strh	r2, [r3, #8]
    pxEP->Type          = eType;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	78ba      	ldrb	r2, [r7, #2]
 80061e8:	729a      	strb	r2, [r3, #10]

    /* Configure EP type */
    USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EP_T_MASK)
 80061ea:	4a9c      	ldr	r2, [pc, #624]	; (800645c <USB_vEpOpen+0x2c8>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	7b5b      	ldrb	r3, [r3, #13]
 80061f0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	b29a      	uxth	r2, r3
            | usb_ausEpTypeRemap[pxEP->Type];
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	7a9b      	ldrb	r3, [r3, #10]
 8006204:	4619      	mov	r1, r3
 8006206:	4b96      	ldr	r3, [pc, #600]	; (8006460 <USB_vEpOpen+0x2cc>)
 8006208:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EP_T_MASK)
 800620c:	4893      	ldr	r0, [pc, #588]	; (800645c <USB_vEpOpen+0x2c8>)
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	7b49      	ldrb	r1, [r1, #13]
            | usb_ausEpTypeRemap[pxEP->Type];
 8006212:	4313      	orrs	r3, r2
 8006214:	b29b      	uxth	r3, r3
    USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EP_T_MASK)
 8006216:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

    /* Configure EP address */
    USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EPREG_MASK)
 800621a:	4a90      	ldr	r2, [pc, #576]	; (800645c <USB_vEpOpen+0x2c8>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7b5b      	ldrb	r3, [r3, #13]
 8006220:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006224:	b29a      	uxth	r2, r3
            | USB_EP_CTR_RX | USB_EP_CTR_TX | ucEpNum;
 8006226:	f640 730f 	movw	r3, #3855	; 0xf0f
 800622a:	4013      	ands	r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	7afb      	ldrb	r3, [r7, #11]
 8006230:	b29b      	uxth	r3, r3
 8006232:	4313      	orrs	r3, r2
 8006234:	b29a      	uxth	r2, r3
    USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EPREG_MASK)
 8006236:	4989      	ldr	r1, [pc, #548]	; (800645c <USB_vEpOpen+0x2c8>)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	7b5b      	ldrb	r3, [r3, #13]
 800623c:	4618      	mov	r0, r3
            | USB_EP_CTR_RX | USB_EP_CTR_TX | ucEpNum;
 800623e:	4b89      	ldr	r3, [pc, #548]	; (8006464 <USB_vEpOpen+0x2d0>)
 8006240:	4313      	orrs	r3, r2
 8006242:	b29b      	uxth	r3, r3
    USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EPREG_MASK)
 8006244:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]

    /* Double buffer */
    if (USB_EP_DOUBLE_BUFFERED(pxEP))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	7a9b      	ldrb	r3, [r3, #10]
 800624c:	2b01      	cmp	r3, #1
 800624e:	f040 80cb 	bne.w	80063e8 <USB_vEpOpen+0x254>
    {
        /* Set the endpoint as double buffered */
        USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EPREG_MASK)
 8006252:	4a82      	ldr	r2, [pc, #520]	; (800645c <USB_vEpOpen+0x2c8>)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	7b5b      	ldrb	r3, [r3, #13]
 8006258:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800625c:	b29a      	uxth	r2, r3
            | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_KIND;
 800625e:	f640 630f 	movw	r3, #3599	; 0xe0f
 8006262:	4013      	ands	r3, r2
 8006264:	b29a      	uxth	r2, r3
        USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EPREG_MASK)
 8006266:	497d      	ldr	r1, [pc, #500]	; (800645c <USB_vEpOpen+0x2c8>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	7b5b      	ldrb	r3, [r3, #13]
 800626c:	4618      	mov	r0, r3
            | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_KIND;
 800626e:	4b7e      	ldr	r3, [pc, #504]	; (8006468 <USB_vEpOpen+0x2d4>)
 8006270:	4313      	orrs	r3, r2
 8006272:	b29b      	uxth	r3, r3
        USB->EPR[pxEP->RegId].w = (USB->EPR[pxEP->RegId].w & USB_EPREG_MASK)
 8006274:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]

        /* Clear the data toggle bits for the endpoint IN/OUT */
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_RX);
 8006278:	4a78      	ldr	r2, [pc, #480]	; (800645c <USB_vEpOpen+0x2c8>)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	7b5b      	ldrb	r3, [r3, #13]
 800627e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006282:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <USB_vEpOpen+0x11e>
 800628c:	4a73      	ldr	r2, [pc, #460]	; (800645c <USB_vEpOpen+0x2c8>)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	7b5b      	ldrb	r3, [r3, #13]
 8006292:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006296:	b29a      	uxth	r2, r3
 8006298:	f640 730f 	movw	r3, #3855	; 0xf0f
 800629c:	4013      	ands	r3, r2
 800629e:	b29a      	uxth	r2, r3
 80062a0:	496e      	ldr	r1, [pc, #440]	; (800645c <USB_vEpOpen+0x2c8>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	7b5b      	ldrb	r3, [r3, #13]
 80062a6:	4618      	mov	r0, r3
 80062a8:	4b70      	ldr	r3, [pc, #448]	; (800646c <USB_vEpOpen+0x2d8>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_TX);
 80062b2:	4a6a      	ldr	r2, [pc, #424]	; (800645c <USB_vEpOpen+0x2c8>)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	7b5b      	ldrb	r3, [r3, #13]
 80062b8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80062bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d012      	beq.n	80062ec <USB_vEpOpen+0x158>
 80062c6:	4a65      	ldr	r2, [pc, #404]	; (800645c <USB_vEpOpen+0x2c8>)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	7b5b      	ldrb	r3, [r3, #13]
 80062cc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80062d6:	4013      	ands	r3, r2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	4960      	ldr	r1, [pc, #384]	; (800645c <USB_vEpOpen+0x2c8>)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	7b5b      	ldrb	r3, [r3, #13]
 80062e0:	4618      	mov	r0, r3
 80062e2:	4b63      	ldr	r3, [pc, #396]	; (8006470 <USB_vEpOpen+0x2dc>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]

        /* Initially no data */
        USB_EP_BDT[pxEP->RegId].TX_COUNT =
        USB_EP_BDT[pxEP->RegId].RX_COUNT = 0;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	7b5b      	ldrb	r3, [r3, #13]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80062fa:	2200      	movs	r2, #0
 80062fc:	60da      	str	r2, [r3, #12]
        USB_EP_BDT[pxEP->RegId].TX_COUNT =
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	7b5b      	ldrb	r3, [r3, #13]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006308:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800630c:	605a      	str	r2, [r3, #4]

        if (ucEpAddress > 0x7F)
 800630e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006312:	2b00      	cmp	r3, #0
 8006314:	da2a      	bge.n	800636c <USB_vEpOpen+0x1d8>
        {
            /* DTOG == SW_BUF == 0 result in NAK */
            USB_EP_SET_STATUS(pxEP->RegId, TX, VALID);
 8006316:	4a51      	ldr	r2, [pc, #324]	; (800645c <USB_vEpOpen+0x2c8>)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	7b5b      	ldrb	r3, [r3, #13]
 800631c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632a:	b29b      	uxth	r3, r3
 800632c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006330:	b29a      	uxth	r2, r3
 8006332:	494a      	ldr	r1, [pc, #296]	; (800645c <USB_vEpOpen+0x2c8>)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	7b5b      	ldrb	r3, [r3, #13]
 8006338:	4618      	mov	r0, r3
 800633a:	4b4a      	ldr	r3, [pc, #296]	; (8006464 <USB_vEpOpen+0x2d0>)
 800633c:	4313      	orrs	r3, r2
 800633e:	b29b      	uxth	r3, r3
 8006340:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            /* Disable unused direction */
            USB_EP_SET_STATUS(pxEP->RegId, RX, DIS);
 8006344:	4a45      	ldr	r2, [pc, #276]	; (800645c <USB_vEpOpen+0x2c8>)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	7b5b      	ldrb	r3, [r3, #13]
 800634a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800634e:	b29a      	uxth	r2, r3
 8006350:	f643 730f 	movw	r3, #16143	; 0x3f0f
 8006354:	4013      	ands	r3, r2
 8006356:	b29a      	uxth	r2, r3
 8006358:	4940      	ldr	r1, [pc, #256]	; (800645c <USB_vEpOpen+0x2c8>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	7b5b      	ldrb	r3, [r3, #13]
 800635e:	4618      	mov	r0, r3
 8006360:	4b40      	ldr	r3, [pc, #256]	; (8006464 <USB_vEpOpen+0x2d0>)
 8006362:	4313      	orrs	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
    else
    {
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_RX);
        USB_EP_SET_STATUS(pxEP->RegId, RX, NAK);
    }
}
 800636a:	e0b7      	b.n	80064dc <USB_vEpOpen+0x348>
            USB_TOGGLE(pxEP->RegId, DTOG_TX);
 800636c:	4a3b      	ldr	r2, [pc, #236]	; (800645c <USB_vEpOpen+0x2c8>)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	7b5b      	ldrb	r3, [r3, #13]
 8006372:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006376:	b29a      	uxth	r2, r3
 8006378:	f640 730f 	movw	r3, #3855	; 0xf0f
 800637c:	4013      	ands	r3, r2
 800637e:	b29a      	uxth	r2, r3
 8006380:	4936      	ldr	r1, [pc, #216]	; (800645c <USB_vEpOpen+0x2c8>)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	7b5b      	ldrb	r3, [r3, #13]
 8006386:	4618      	mov	r0, r3
 8006388:	4b39      	ldr	r3, [pc, #228]	; (8006470 <USB_vEpOpen+0x2dc>)
 800638a:	4313      	orrs	r3, r2
 800638c:	b29b      	uxth	r3, r3
 800638e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            USB_EP_SET_STATUS(pxEP->RegId, RX, VALID);
 8006392:	4a32      	ldr	r2, [pc, #200]	; (800645c <USB_vEpOpen+0x2c8>)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	7b5b      	ldrb	r3, [r3, #13]
 8006398:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	492b      	ldr	r1, [pc, #172]	; (800645c <USB_vEpOpen+0x2c8>)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	7b5b      	ldrb	r3, [r3, #13]
 80063b4:	4618      	mov	r0, r3
 80063b6:	4b2b      	ldr	r3, [pc, #172]	; (8006464 <USB_vEpOpen+0x2d0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            USB_EP_SET_STATUS(pxEP->RegId, TX, DIS);
 80063c0:	4a26      	ldr	r2, [pc, #152]	; (800645c <USB_vEpOpen+0x2c8>)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	7b5b      	ldrb	r3, [r3, #13]
 80063c6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f640 733f 	movw	r3, #3903	; 0xf3f
 80063d0:	4013      	ands	r3, r2
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	4921      	ldr	r1, [pc, #132]	; (800645c <USB_vEpOpen+0x2c8>)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	7b5b      	ldrb	r3, [r3, #13]
 80063da:	4618      	mov	r0, r3
 80063dc:	4b21      	ldr	r3, [pc, #132]	; (8006464 <USB_vEpOpen+0x2d0>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 80063e6:	e079      	b.n	80064dc <USB_vEpOpen+0x348>
    else if (ucEpAddress > 0x7F)
 80063e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da41      	bge.n	8006474 <USB_vEpOpen+0x2e0>
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_TX);
 80063f0:	4a1a      	ldr	r2, [pc, #104]	; (800645c <USB_vEpOpen+0x2c8>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	7b5b      	ldrb	r3, [r3, #13]
 80063f6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80063fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d012      	beq.n	800642a <USB_vEpOpen+0x296>
 8006404:	4a15      	ldr	r2, [pc, #84]	; (800645c <USB_vEpOpen+0x2c8>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	7b5b      	ldrb	r3, [r3, #13]
 800640a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800640e:	b29a      	uxth	r2, r3
 8006410:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006414:	4013      	ands	r3, r2
 8006416:	b29a      	uxth	r2, r3
 8006418:	4910      	ldr	r1, [pc, #64]	; (800645c <USB_vEpOpen+0x2c8>)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	7b5b      	ldrb	r3, [r3, #13]
 800641e:	4618      	mov	r0, r3
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <USB_vEpOpen+0x2dc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	b29b      	uxth	r3, r3
 8006426:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        USB_EP_SET_STATUS(pxEP->RegId, TX, NAK);
 800642a:	4a0c      	ldr	r2, [pc, #48]	; (800645c <USB_vEpOpen+0x2c8>)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	7b5b      	ldrb	r3, [r3, #13]
 8006430:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643e:	b29b      	uxth	r3, r3
 8006440:	f083 0320 	eor.w	r3, r3, #32
 8006444:	b29a      	uxth	r2, r3
 8006446:	4905      	ldr	r1, [pc, #20]	; (800645c <USB_vEpOpen+0x2c8>)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	7b5b      	ldrb	r3, [r3, #13]
 800644c:	4618      	mov	r0, r3
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <USB_vEpOpen+0x2d0>)
 8006450:	4313      	orrs	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 8006458:	e040      	b.n	80064dc <USB_vEpOpen+0x348>
 800645a:	bf00      	nop
 800645c:	40005c00 	.word	0x40005c00
 8006460:	08007054 	.word	0x08007054
 8006464:	ffff8080 	.word	0xffff8080
 8006468:	ffff8180 	.word	0xffff8180
 800646c:	ffffc080 	.word	0xffffc080
 8006470:	ffff80c0 	.word	0xffff80c0
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_RX);
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <USB_vEpOpen+0x354>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	7b5b      	ldrb	r3, [r3, #13]
 800647a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800647e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d012      	beq.n	80064ae <USB_vEpOpen+0x31a>
 8006488:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <USB_vEpOpen+0x354>)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	7b5b      	ldrb	r3, [r3, #13]
 800648e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006492:	b29a      	uxth	r2, r3
 8006494:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006498:	4013      	ands	r3, r2
 800649a:	b29a      	uxth	r2, r3
 800649c:	4912      	ldr	r1, [pc, #72]	; (80064e8 <USB_vEpOpen+0x354>)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	7b5b      	ldrb	r3, [r3, #13]
 80064a2:	4618      	mov	r0, r3
 80064a4:	4b11      	ldr	r3, [pc, #68]	; (80064ec <USB_vEpOpen+0x358>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        USB_EP_SET_STATUS(pxEP->RegId, RX, NAK);
 80064ae:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <USB_vEpOpen+0x354>)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	7b5b      	ldrb	r3, [r3, #13]
 80064b4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	4907      	ldr	r1, [pc, #28]	; (80064e8 <USB_vEpOpen+0x354>)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	7b5b      	ldrb	r3, [r3, #13]
 80064d0:	4618      	mov	r0, r3
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <USB_vEpOpen+0x35c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 80064dc:	bf00      	nop
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40005c00 	.word	0x40005c00
 80064ec:	ffffc080 	.word	0xffffc080
 80064f0:	ffff8080 	.word	0xffff8080

080064f4 <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 8006500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006504:	2b00      	cmp	r3, #0
 8006506:	da08      	bge.n	800651a <USB_vEpClose+0x26>
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	3303      	adds	r3, #3
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	3304      	adds	r3, #4
 8006518:	e005      	b.n	8006526 <USB_vEpClose+0x32>
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	330b      	adds	r3, #11
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	3304      	adds	r3, #4
 8006526:	60fb      	str	r3, [r7, #12]

    if (ucEpAddress > 0x7F)
 8006528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800652c:	2b00      	cmp	r3, #0
 800652e:	da78      	bge.n	8006622 <USB_vEpClose+0x12e>
    {
        /* Configure DISABLE status for the Endpoint*/
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_TX);
 8006530:	4a7a      	ldr	r2, [pc, #488]	; (800671c <USB_vEpClose+0x228>)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	7b5b      	ldrb	r3, [r3, #13]
 8006536:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800653a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d012      	beq.n	800656a <USB_vEpClose+0x76>
 8006544:	4a75      	ldr	r2, [pc, #468]	; (800671c <USB_vEpClose+0x228>)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	7b5b      	ldrb	r3, [r3, #13]
 800654a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006554:	4013      	ands	r3, r2
 8006556:	b29a      	uxth	r2, r3
 8006558:	4970      	ldr	r1, [pc, #448]	; (800671c <USB_vEpClose+0x228>)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	7b5b      	ldrb	r3, [r3, #13]
 800655e:	4618      	mov	r0, r3
 8006560:	4b6f      	ldr	r3, [pc, #444]	; (8006720 <USB_vEpClose+0x22c>)
 8006562:	4313      	orrs	r3, r2
 8006564:	b29b      	uxth	r3, r3
 8006566:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        USB_EP_SET_STATUS(pxEP->RegId, TX, DIS);
 800656a:	4a6c      	ldr	r2, [pc, #432]	; (800671c <USB_vEpClose+0x228>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	7b5b      	ldrb	r3, [r3, #13]
 8006570:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006574:	b29a      	uxth	r2, r3
 8006576:	f640 733f 	movw	r3, #3903	; 0xf3f
 800657a:	4013      	ands	r3, r2
 800657c:	b29a      	uxth	r2, r3
 800657e:	4967      	ldr	r1, [pc, #412]	; (800671c <USB_vEpClose+0x228>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	7b5b      	ldrb	r3, [r3, #13]
 8006584:	4618      	mov	r0, r3
 8006586:	4b67      	ldr	r3, [pc, #412]	; (8006724 <USB_vEpClose+0x230>)
 8006588:	4313      	orrs	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]

        if (USB_EP_DOUBLE_BUFFERED(pxEP))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	7a9b      	ldrb	r3, [r3, #10]
 8006594:	2b01      	cmp	r3, #1
 8006596:	f040 80bb 	bne.w	8006710 <USB_vEpClose+0x21c>
        {
            /* Disable other half of EPnR as well */
            USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_RX);
 800659a:	4a60      	ldr	r2, [pc, #384]	; (800671c <USB_vEpClose+0x228>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	7b5b      	ldrb	r3, [r3, #13]
 80065a0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80065a4:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d012      	beq.n	80065d4 <USB_vEpClose+0xe0>
 80065ae:	4a5b      	ldr	r2, [pc, #364]	; (800671c <USB_vEpClose+0x228>)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	7b5b      	ldrb	r3, [r3, #13]
 80065b4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f640 730f 	movw	r3, #3855	; 0xf0f
 80065be:	4013      	ands	r3, r2
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	4956      	ldr	r1, [pc, #344]	; (800671c <USB_vEpClose+0x228>)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	7b5b      	ldrb	r3, [r3, #13]
 80065c8:	4618      	mov	r0, r3
 80065ca:	4b57      	ldr	r3, [pc, #348]	; (8006728 <USB_vEpClose+0x234>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            USB_TOGGLE(pxEP->RegId, DTOG_RX);
 80065d4:	4a51      	ldr	r2, [pc, #324]	; (800671c <USB_vEpClose+0x228>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	7b5b      	ldrb	r3, [r3, #13]
 80065da:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80065e4:	4013      	ands	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	494c      	ldr	r1, [pc, #304]	; (800671c <USB_vEpClose+0x228>)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	7b5b      	ldrb	r3, [r3, #13]
 80065ee:	4618      	mov	r0, r3
 80065f0:	4b4d      	ldr	r3, [pc, #308]	; (8006728 <USB_vEpClose+0x234>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            USB_EP_SET_STATUS(pxEP->RegId, RX, DIS);
 80065fa:	4a48      	ldr	r2, [pc, #288]	; (800671c <USB_vEpClose+0x228>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	7b5b      	ldrb	r3, [r3, #13]
 8006600:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006604:	b29a      	uxth	r2, r3
 8006606:	f643 730f 	movw	r3, #16143	; 0x3f0f
 800660a:	4013      	ands	r3, r2
 800660c:	b29a      	uxth	r2, r3
 800660e:	4943      	ldr	r1, [pc, #268]	; (800671c <USB_vEpClose+0x228>)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	7b5b      	ldrb	r3, [r3, #13]
 8006614:	4618      	mov	r0, r3
 8006616:	4b43      	ldr	r3, [pc, #268]	; (8006724 <USB_vEpClose+0x230>)
 8006618:	4313      	orrs	r3, r2
 800661a:	b29b      	uxth	r3, r3
 800661c:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_TX);
            USB_TOGGLE(pxEP->RegId, DTOG_TX);
            USB_EP_SET_STATUS(pxEP->RegId, TX, DIS);
        }
    }
}
 8006620:	e076      	b.n	8006710 <USB_vEpClose+0x21c>
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_RX);
 8006622:	4a3e      	ldr	r2, [pc, #248]	; (800671c <USB_vEpClose+0x228>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	7b5b      	ldrb	r3, [r3, #13]
 8006628:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800662c:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d012      	beq.n	800665c <USB_vEpClose+0x168>
 8006636:	4a39      	ldr	r2, [pc, #228]	; (800671c <USB_vEpClose+0x228>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	7b5b      	ldrb	r3, [r3, #13]
 800663c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006640:	b29a      	uxth	r2, r3
 8006642:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006646:	4013      	ands	r3, r2
 8006648:	b29a      	uxth	r2, r3
 800664a:	4934      	ldr	r1, [pc, #208]	; (800671c <USB_vEpClose+0x228>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	7b5b      	ldrb	r3, [r3, #13]
 8006650:	4618      	mov	r0, r3
 8006652:	4b35      	ldr	r3, [pc, #212]	; (8006728 <USB_vEpClose+0x234>)
 8006654:	4313      	orrs	r3, r2
 8006656:	b29b      	uxth	r3, r3
 8006658:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        USB_EP_SET_STATUS(pxEP->RegId, RX, DIS);
 800665c:	4a2f      	ldr	r2, [pc, #188]	; (800671c <USB_vEpClose+0x228>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	7b5b      	ldrb	r3, [r3, #13]
 8006662:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006666:	b29a      	uxth	r2, r3
 8006668:	f643 730f 	movw	r3, #16143	; 0x3f0f
 800666c:	4013      	ands	r3, r2
 800666e:	b29a      	uxth	r2, r3
 8006670:	492a      	ldr	r1, [pc, #168]	; (800671c <USB_vEpClose+0x228>)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	7b5b      	ldrb	r3, [r3, #13]
 8006676:	4618      	mov	r0, r3
 8006678:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <USB_vEpClose+0x230>)
 800667a:	4313      	orrs	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        if (USB_EP_DOUBLE_BUFFERED(pxEP))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	7a9b      	ldrb	r3, [r3, #10]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d142      	bne.n	8006710 <USB_vEpClose+0x21c>
            USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_TX);
 800668a:	4a24      	ldr	r2, [pc, #144]	; (800671c <USB_vEpClose+0x228>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	7b5b      	ldrb	r3, [r3, #13]
 8006690:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006694:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d012      	beq.n	80066c4 <USB_vEpClose+0x1d0>
 800669e:	4a1f      	ldr	r2, [pc, #124]	; (800671c <USB_vEpClose+0x228>)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	7b5b      	ldrb	r3, [r3, #13]
 80066a4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f640 730f 	movw	r3, #3855	; 0xf0f
 80066ae:	4013      	ands	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	491a      	ldr	r1, [pc, #104]	; (800671c <USB_vEpClose+0x228>)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	7b5b      	ldrb	r3, [r3, #13]
 80066b8:	4618      	mov	r0, r3
 80066ba:	4b19      	ldr	r3, [pc, #100]	; (8006720 <USB_vEpClose+0x22c>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29b      	uxth	r3, r3
 80066c0:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            USB_TOGGLE(pxEP->RegId, DTOG_TX);
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <USB_vEpClose+0x228>)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	7b5b      	ldrb	r3, [r3, #13]
 80066ca:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80066d4:	4013      	ands	r3, r2
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	4910      	ldr	r1, [pc, #64]	; (800671c <USB_vEpClose+0x228>)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	7b5b      	ldrb	r3, [r3, #13]
 80066de:	4618      	mov	r0, r3
 80066e0:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <USB_vEpClose+0x22c>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            USB_EP_SET_STATUS(pxEP->RegId, TX, DIS);
 80066ea:	4a0c      	ldr	r2, [pc, #48]	; (800671c <USB_vEpClose+0x228>)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	7b5b      	ldrb	r3, [r3, #13]
 80066f0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f640 733f 	movw	r3, #3903	; 0xf3f
 80066fa:	4013      	ands	r3, r2
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	4907      	ldr	r1, [pc, #28]	; (800671c <USB_vEpClose+0x228>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	7b5b      	ldrb	r3, [r3, #13]
 8006704:	4618      	mov	r0, r3
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <USB_vEpClose+0x230>)
 8006708:	4313      	orrs	r3, r2
 800670a:	b29b      	uxth	r3, r3
 800670c:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40005c00 	.word	0x40005c00
 8006720:	ffff80c0 	.word	0xffff80c0
 8006724:	ffff8080 	.word	0xffff8080
 8006728:	ffffc080 	.word	0xffffc080

0800672c <USB_vEpSetStall>:
 * @brief Set a STALL condition on an endpoint (not supported for Isochronous).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpSetStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 8006738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800673c:	2b00      	cmp	r3, #0
 800673e:	da08      	bge.n	8006752 <USB_vEpSetStall+0x26>
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	3303      	adds	r3, #3
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	3304      	adds	r3, #4
 8006750:	e005      	b.n	800675e <USB_vEpSetStall+0x32>
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	330b      	adds	r3, #11
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	3304      	adds	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]

    if (ucEpAddress > 0x7F)
 8006760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006764:	2b00      	cmp	r3, #0
 8006766:	da17      	bge.n	8006798 <USB_vEpSetStall+0x6c>
    {
        USB_EP_SET_STATUS(pxEP->RegId, TX, STALL);
 8006768:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <USB_vEpSetStall+0xa4>)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	7b5b      	ldrb	r3, [r3, #13]
 800676e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677c:	b29b      	uxth	r3, r3
 800677e:	f083 0310 	eor.w	r3, r3, #16
 8006782:	b29a      	uxth	r2, r3
 8006784:	4912      	ldr	r1, [pc, #72]	; (80067d0 <USB_vEpSetStall+0xa4>)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	7b5b      	ldrb	r3, [r3, #13]
 800678a:	4618      	mov	r0, r3
 800678c:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <USB_vEpSetStall+0xa8>)
 800678e:	4313      	orrs	r3, r2
 8006790:	b29b      	uxth	r3, r3
 8006792:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
    }
    else
    {
        USB_EP_SET_STATUS(pxEP->RegId, RX, STALL);
    }
}
 8006796:	e016      	b.n	80067c6 <USB_vEpSetStall+0x9a>
        USB_EP_SET_STATUS(pxEP->RegId, RX, STALL);
 8006798:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <USB_vEpSetStall+0xa4>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	7b5b      	ldrb	r3, [r3, #13]
 800679e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	4906      	ldr	r1, [pc, #24]	; (80067d0 <USB_vEpSetStall+0xa4>)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	7b5b      	ldrb	r3, [r3, #13]
 80067ba:	4618      	mov	r0, r3
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <USB_vEpSetStall+0xa8>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr
 80067d0:	40005c00 	.word	0x40005c00
 80067d4:	ffff8080 	.word	0xffff8080

080067d8 <USB_vEpClearStall>:
 * @brief Clear a STALL condition on an endpoint.
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClearStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 80067e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da08      	bge.n	80067fe <USB_vEpClearStall+0x26>
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	3303      	adds	r3, #3
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4413      	add	r3, r2
 80067fa:	3304      	adds	r3, #4
 80067fc:	e005      	b.n	800680a <USB_vEpClearStall+0x32>
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	330b      	adds	r3, #11
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4413      	add	r3, r2
 8006808:	3304      	adds	r3, #4
 800680a:	60fb      	str	r3, [r7, #12]

    if (ucEpAddress > 0x7F)
 800680c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006810:	2b00      	cmp	r3, #0
 8006812:	da34      	bge.n	800687e <USB_vEpClearStall+0xa6>
    {
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_TX);
 8006814:	4a36      	ldr	r2, [pc, #216]	; (80068f0 <USB_vEpClearStall+0x118>)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	7b5b      	ldrb	r3, [r3, #13]
 800681a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800681e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d012      	beq.n	800684e <USB_vEpClearStall+0x76>
 8006828:	4a31      	ldr	r2, [pc, #196]	; (80068f0 <USB_vEpClearStall+0x118>)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	7b5b      	ldrb	r3, [r3, #13]
 800682e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006832:	b29a      	uxth	r2, r3
 8006834:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006838:	4013      	ands	r3, r2
 800683a:	b29a      	uxth	r2, r3
 800683c:	492c      	ldr	r1, [pc, #176]	; (80068f0 <USB_vEpClearStall+0x118>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	7b5b      	ldrb	r3, [r3, #13]
 8006842:	4618      	mov	r0, r3
 8006844:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <USB_vEpClearStall+0x11c>)
 8006846:	4313      	orrs	r3, r2
 8006848:	b29b      	uxth	r3, r3
 800684a:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        USB_EP_SET_STATUS(pxEP->RegId, TX, NAK);
 800684e:	4a28      	ldr	r2, [pc, #160]	; (80068f0 <USB_vEpClearStall+0x118>)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	7b5b      	ldrb	r3, [r3, #13]
 8006854:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006862:	b29b      	uxth	r3, r3
 8006864:	f083 0320 	eor.w	r3, r3, #32
 8006868:	b29a      	uxth	r2, r3
 800686a:	4921      	ldr	r1, [pc, #132]	; (80068f0 <USB_vEpClearStall+0x118>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	7b5b      	ldrb	r3, [r3, #13]
 8006870:	4618      	mov	r0, r3
 8006872:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <USB_vEpClearStall+0x120>)
 8006874:	4313      	orrs	r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
    else
    {
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_RX);
        USB_EP_SET_STATUS(pxEP->RegId, RX, VALID);
    }
}
 800687c:	e033      	b.n	80068e6 <USB_vEpClearStall+0x10e>
        USB_TOGGLE_CLEAR(pxEP->RegId, DTOG_RX);
 800687e:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <USB_vEpClearStall+0x118>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	7b5b      	ldrb	r3, [r3, #13]
 8006884:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006888:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d012      	beq.n	80068b8 <USB_vEpClearStall+0xe0>
 8006892:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <USB_vEpClearStall+0x118>)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	7b5b      	ldrb	r3, [r3, #13]
 8006898:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800689c:	b29a      	uxth	r2, r3
 800689e:	f640 730f 	movw	r3, #3855	; 0xf0f
 80068a2:	4013      	ands	r3, r2
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	4912      	ldr	r1, [pc, #72]	; (80068f0 <USB_vEpClearStall+0x118>)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	7b5b      	ldrb	r3, [r3, #13]
 80068ac:	4618      	mov	r0, r3
 80068ae:	4b13      	ldr	r3, [pc, #76]	; (80068fc <USB_vEpClearStall+0x124>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
        USB_EP_SET_STATUS(pxEP->RegId, RX, VALID);
 80068b8:	4a0d      	ldr	r2, [pc, #52]	; (80068f0 <USB_vEpClearStall+0x118>)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7b5b      	ldrb	r3, [r3, #13]
 80068be:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	4906      	ldr	r1, [pc, #24]	; (80068f0 <USB_vEpClearStall+0x118>)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	7b5b      	ldrb	r3, [r3, #13]
 80068da:	4618      	mov	r0, r3
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <USB_vEpClearStall+0x120>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr
 80068f0:	40005c00 	.word	0x40005c00
 80068f4:	ffff80c0 	.word	0xffff80c0
 80068f8:	ffff8080 	.word	0xffff8080
 80068fc:	ffffc080 	.word	0xffffc080

08006900 <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	461a      	mov	r2, r3
 800690c:	460b      	mov	r3, r1
 800690e:	72fb      	strb	r3, [r7, #11]
 8006910:	4613      	mov	r3, r2
 8006912:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpAddress & 0xF];
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	3303      	adds	r3, #3
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	3304      	adds	r3, #4
 8006924:	617b      	str	r3, [r7, #20]

    /* setup the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	893a      	ldrh	r2, [r7, #8]
 8006930:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	893a      	ldrh	r2, [r7, #8]
 8006936:	809a      	strh	r2, [r3, #4]

    USB_prvTransmitPacket(pxUSB, pxEP);
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff fa84 	bl	8005e48 <USB_prvTransmitPacket>
}
 8006940:	bf00      	nop
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	461a      	mov	r2, r3
 8006954:	460b      	mov	r3, r1
 8006956:	72fb      	strb	r3, [r7, #11]
 8006958:	4613      	mov	r3, r2
 800695a:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 800695c:	7afb      	ldrb	r3, [r7, #11]
 800695e:	330b      	adds	r3, #11
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	3304      	adds	r3, #4
 8006968:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	893a      	ldrh	r2, [r7, #8]
 8006974:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	809a      	strh	r2, [r3, #4]

    USB_prvReceivePacket(pxUSB, pxEP);
 800697c:	6979      	ldr	r1, [r7, #20]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f7ff fa14 	bl	8005dac <USB_prvReceivePacket>
}
 8006984:	bf00      	nop
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USB_vIRQHandler>:
 * @brief USB interrupt handler that provides event-driven peripheral management.
 *        and handle callbacks.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vIRQHandler(USB_HandleType * pxUSB)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
    uint16_t usISTR;

    /* loop while Endpoint interrupts are present */
    for (usISTR = USB->ISTR.w; (usISTR & USB_ISTR_CTR) != 0; usISTR = USB->ISTR.w)
 8006994:	4b8b      	ldr	r3, [pc, #556]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006996:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800699a:	83fb      	strh	r3, [r7, #30]
 800699c:	e122      	b.n	8006be4 <USB_vIRQHandler+0x258>
    {
        /* Read highest priority endpoint number */
        uint16_t usEpId  = usISTR & USB_ISTR_EP_ID;
 800699e:	8bfb      	ldrh	r3, [r7, #30]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	833b      	strh	r3, [r7, #24]
        uint16_t usEpReg = USB->EPR[usEpId].w;
 80069a6:	4a87      	ldr	r2, [pc, #540]	; (8006bc4 <USB_vIRQHandler+0x238>)
 80069a8:	8b3b      	ldrh	r3, [r7, #24]
 80069aa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80069ae:	82fb      	strh	r3, [r7, #22]
        uint8_t  ucEpNum = usEpReg & USB_EPADDR_FIELD;
 80069b0:	8afb      	ldrh	r3, [r7, #22]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	757b      	strb	r3, [r7, #21]
        uint16_t usDataCount;

        /* OUT data received */
        if ((usEpReg & USB_EP_CTR_RX) != 0)
 80069ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f280 80b7 	bge.w	8006b32 <USB_vIRQHandler+0x1a6>
        {
            USB_EndPointHandleType *pxEP = &pxUSB->EP.OUT[ucEpNum];
 80069c4:	7d7b      	ldrb	r3, [r7, #21]
 80069c6:	330b      	adds	r3, #11
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	613b      	str	r3, [r7, #16]

            /* Get SETUP Packet (EP0 only) */
            if ((usEpReg & USB_EP_SETUP) != 0)
 80069d2:	8afb      	ldrh	r3, [r7, #22]
 80069d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01c      	beq.n	8006a16 <USB_vIRQHandler+0x8a>
            {
                uint8_t* pSetup = (uint8_t*)&pxUSB->Setup;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	60fb      	str	r3, [r7, #12]

                /* Clear RX complete flag */
                USB_EP_FLAG_CLEAR(0, CTR_RX);
 80069e2:	4b78      	ldr	r3, [pc, #480]	; (8006bc4 <USB_vIRQHandler+0x238>)
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	4976      	ldr	r1, [pc, #472]	; (8006bc4 <USB_vIRQHandler+0x238>)
 80069ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069ee:	4013      	ands	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	800b      	strh	r3, [r1, #0]

                USB_prvReadPMA(pSetup, USB_EP_BDT[usEpId].RX_ADDR,
 80069f4:	8b3b      	ldrh	r3, [r7, #24]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069fc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2208      	movs	r2, #8
 8006a06:	4619      	mov	r1, r3
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff f947 	bl	8005c9c <USB_prvReadPMA>
                        sizeof(pxUSB->Setup));

                /* Process SETUP Packet */
                USB_vSetupCallback(pxUSB);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fe fc46 	bl	80052a0 <USBD_SetupCallback>
 8006a14:	e08d      	b.n	8006b32 <USB_vIRQHandler+0x1a6>
            }
            else
            {
                /* Get Data packet */
                uint16_t usPmaAddress = USB_EP_BDT[usEpId].RX_ADDR;
 8006a16:	8b3b      	ldrh	r3, [r7, #24]
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a1e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	837b      	strh	r3, [r7, #26]
                usDataCount = USB_EP_BDT[usEpId].RX_COUNT & 0x3FF;
 8006a26:	8b3b      	ldrh	r3, [r7, #24]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a2e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a3a:	83bb      	strh	r3, [r7, #28]

                /* Clear RX complete flag */
                USB_EP_FLAG_CLEAR(usEpId, CTR_RX);
 8006a3c:	4a61      	ldr	r2, [pc, #388]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006a3e:	8b3b      	ldrh	r3, [r7, #24]
 8006a40:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006a44:	b299      	uxth	r1, r3
 8006a46:	485f      	ldr	r0, [pc, #380]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006a48:	8b3a      	ldrh	r2, [r7, #24]
 8006a4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a4e:	400b      	ands	r3, r1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

                /* Double buffering */
                if (USB_EP_DOUBLE_BUFFERED(pxEP))
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	7a9b      	ldrb	r3, [r3, #10]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d127      	bne.n	8006aae <USB_vIRQHandler+0x122>
                {
                    if ((usEpReg & USB_EP_DTOG_RX) != 0)
 8006a5e:	8afb      	ldrh	r3, [r7, #22]
 8006a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d012      	beq.n	8006a8e <USB_vIRQHandler+0x102>
                    {
                        /* read from endpoint buffer 0 */
                        usPmaAddress = USB_EP_BDT[usEpId].TX_ADDR;
 8006a68:	8b3b      	ldrh	r3, [r7, #24]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	837b      	strh	r3, [r7, #26]
                        usDataCount  = USB_EP_BDT[usEpId].TX_COUNT & 0x3FF;
 8006a78:	8b3b      	ldrh	r3, [r7, #24]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a8c:	83bb      	strh	r3, [r7, #28]
                    }

                    /* Switch the reception buffer by toggling SW_BUF flag */
                    USB_TOGGLE(usEpId, DTOG_TX);
 8006a8e:	4a4d      	ldr	r2, [pc, #308]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006a90:	8b3b      	ldrh	r3, [r7, #24]
 8006a92:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	b299      	uxth	r1, r3
 8006aa0:	4848      	ldr	r0, [pc, #288]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006aa2:	8b3a      	ldrh	r2, [r7, #24]
 8006aa4:	4b48      	ldr	r3, [pc, #288]	; (8006bc8 <USB_vIRQHandler+0x23c>)
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
                }

                USB_prvReadPMA(pxEP->Transfer.Data, usPmaAddress, usDataCount);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	8bba      	ldrh	r2, [r7, #28]
 8006ab4:	8b79      	ldrh	r1, [r7, #26]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff f8f0 	bl	8005c9c <USB_prvReadPMA>

                pxEP->Transfer.Length += usDataCount;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	889a      	ldrh	r2, [r3, #4]
 8006ac0:	8bbb      	ldrh	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	809a      	strh	r2, [r3, #4]
                pxEP->Transfer.Data += usDataCount;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	8bbb      	ldrh	r3, [r7, #28]
 8006ad0:	441a      	add	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	601a      	str	r2, [r3, #0]

                /* If the last packet of the data, transfer is complete
                 * TODO if Length % MaxPacketSize == 0 the transfer will hang without ZLP */
                if ((pxEP->Transfer.Progress == 0) ||
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <USB_vIRQHandler+0x15c>
                    (usDataCount < pxEP->MaxPacketSize))
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	891b      	ldrh	r3, [r3, #8]
                if ((pxEP->Transfer.Progress == 0) ||
 8006ae2:	8bba      	ldrh	r2, [r7, #28]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d220      	bcs.n	8006b2a <USB_vIRQHandler+0x19e>
                {
                    /* Reception finished */
                    USB_vDataOutCallback(pxUSB, pxEP);
 8006ae8:	6939      	ldr	r1, [r7, #16]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fe fe75 	bl	80057da <USBD_EpOutCallback>

                    if (ucEpNum == 0)
 8006af0:	7d7b      	ldrb	r3, [r7, #21]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d11d      	bne.n	8006b32 <USB_vIRQHandler+0x1a6>
                    {
                        /* Keep EP0 ready to receive next setup */
                        USB_EP_BDT[0].RX_COUNT =
                                USB_prvConvertRxCount(pxEP->MaxPacketSize);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	891b      	ldrh	r3, [r3, #8]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff f90e 	bl	8005d1c <USB_prvConvertRxCount>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
                        USB_EP_BDT[0].RX_COUNT =
 8006b04:	4b31      	ldr	r3, [pc, #196]	; (8006bcc <USB_vIRQHandler+0x240>)
 8006b06:	60da      	str	r2, [r3, #12]
                        USB_EP_SET_STATUS(0, RX, VALID);
 8006b08:	4b2e      	ldr	r3, [pc, #184]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	4929      	ldr	r1, [pc, #164]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006b20:	4b2b      	ldr	r3, [pc, #172]	; (8006bd0 <USB_vIRQHandler+0x244>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	800b      	strh	r3, [r1, #0]
                    if (ucEpNum == 0)
 8006b28:	e003      	b.n	8006b32 <USB_vIRQHandler+0x1a6>
                    }
                }
                else
                {
                    /* Continue data reception */
                    USB_prvReceivePacket(pxUSB, pxEP);
 8006b2a:	6939      	ldr	r1, [r7, #16]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff f93d 	bl	8005dac <USB_prvReceivePacket>
                }
            }
        }

        /* IN data sent */
        if ((usEpReg & USB_EP_CTR_TX) != 0)
 8006b32:	8afb      	ldrh	r3, [r7, #22]
 8006b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d04f      	beq.n	8006bdc <USB_vIRQHandler+0x250>
        {
            USB_EndPointHandleType *pxEP = &pxUSB->EP.IN[ucEpNum];
 8006b3c:	7d7b      	ldrb	r3, [r7, #21]
 8006b3e:	3303      	adds	r3, #3
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4413      	add	r3, r2
 8006b46:	3304      	adds	r3, #4
 8006b48:	60bb      	str	r3, [r7, #8]

            /* Clear TX complete flag */
            USB_EP_FLAG_CLEAR(usEpId, CTR_TX);
 8006b4a:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006b4c:	8b3b      	ldrh	r3, [r7, #24]
 8006b4e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	491b      	ldr	r1, [pc, #108]	; (8006bc4 <USB_vIRQHandler+0x238>)
 8006b56:	8b3a      	ldrh	r2, [r7, #24]
 8006b58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]

            /* Double buffering */
            if ((USB_EP_DOUBLE_BUFFERED(pxEP)) && ((usEpReg & USB_EP_DTOG_TX) == 0))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	7a9b      	ldrb	r3, [r3, #10]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d110      	bne.n	8006b90 <USB_vIRQHandler+0x204>
 8006b6e:	8afb      	ldrh	r3, [r7, #22]
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <USB_vIRQHandler+0x204>
            {
                /* written from endpoint 1 buffer */
                usDataCount = USB_EP_BDT[usEpId].RX_COUNT & 0x3FF;
 8006b78:	8b3b      	ldrh	r3, [r7, #24]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b8c:	83bb      	strh	r3, [r7, #28]
 8006b8e:	e00a      	b.n	8006ba6 <USB_vIRQHandler+0x21a>
            }
            else
            {
                /* written from endpoint 0 (Tx) buffer */
                usDataCount = USB_EP_BDT[usEpId].TX_COUNT & 0x3FF;
 8006b90:	8b3b      	ldrh	r3, [r7, #24]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b98:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba4:	83bb      	strh	r3, [r7, #28]
            }
            pxEP->Transfer.Data += usDataCount;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	8bbb      	ldrh	r3, [r7, #28]
 8006bac:	441a      	add	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	601a      	str	r2, [r3, #0]

            /* If the last packet of the data */
            if (pxEP->Transfer.Progress == 0)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	88db      	ldrh	r3, [r3, #6]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10c      	bne.n	8006bd4 <USB_vIRQHandler+0x248>
            {
                /* Transmission complete */
                USB_vDataInCallback(pxUSB, pxEP);
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fe fdec 	bl	800579a <USBD_EpInCallback>
 8006bc2:	e00b      	b.n	8006bdc <USB_vIRQHandler+0x250>
 8006bc4:	40005c00 	.word	0x40005c00
 8006bc8:	ffff80c0 	.word	0xffff80c0
 8006bcc:	40006000 	.word	0x40006000
 8006bd0:	ffff8080 	.word	0xffff8080
            }
            else
            {
                /* Continue data transmission */
                USB_prvTransmitPacket(pxUSB, pxEP);
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff f936 	bl	8005e48 <USB_prvTransmitPacket>
    for (usISTR = USB->ISTR.w; (usISTR & USB_ISTR_CTR) != 0; usISTR = USB->ISTR.w)
 8006bdc:	4b4b      	ldr	r3, [pc, #300]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006be2:	83fb      	strh	r3, [r7, #30]
 8006be4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f6ff aed8 	blt.w	800699e <USB_vIRQHandler+0x12>
            }
        }
    }

    /* Handle device reset */
    if ((usISTR & USB_ISTR_RESET) != 0)
 8006bee:	8bfb      	ldrh	r3, [r7, #30]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01c      	beq.n	8006c32 <USB_vIRQHandler+0x2a6>
    {
        USB_FLAG_CLEAR(pxUSB, RESET);
 8006bf8:	4a44      	ldr	r2, [pc, #272]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006bfa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006bfe:	f36f 238a 	bfc	r3, #10, #1
 8006c02:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

        /* Clear any ongoing Remote Wakeup signaling */
        CLEAR_BIT(USB->CNTR.w, USB_CNTR_RESUME);
 8006c06:	4b41      	ldr	r3, [pc, #260]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4a3f      	ldr	r2, [pc, #252]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c10:	f023 0310 	bic.w	r3, r3, #16
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
        pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        /* Set default address (0) */
        USB_vSetAddress(pxUSB, 0);
 8006c22:	2100      	movs	r1, #0
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fa91 	bl	800614c <USB_vSetAddress>

        /* Notify device handler */
        USB_vResetCallback(pxUSB, USB_SPEED_FULL);
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fe f905 	bl	8004e3c <USBD_ResetCallback>
    }

    /* Handle wakeup signal */
    if ((usISTR & USB_ISTR_WKUP) != 0)
 8006c32:	8bfb      	ldrh	r3, [r7, #30]
 8006c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01c      	beq.n	8006c76 <USB_vIRQHandler+0x2ea>
    {
        /* Release low-power mode, clear any ongoing Remote Wakeup signaling */
        CLEAR_BIT(USB->CNTR.w, USB_CNTR_FSUSP | USB_CNTR_LPMODE | USB_CNTR_RESUME);
 8006c3c:	4b33      	ldr	r3, [pc, #204]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4a31      	ldr	r2, [pc, #196]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c46:	f023 031c 	bic.w	r3, r3, #28
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

        USB_FLAG_CLEAR(pxUSB, WKUP);
 8006c50:	4a2e      	ldr	r2, [pc, #184]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c52:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006c56:	f36f 330c 	bfc	r3, #12, #1
 8006c5a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

        XPD_SAFE_CALLBACK(pxUSB->Callbacks.Resume, pxUSB);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <USB_vIRQHandler+0x2e2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3

        /* LPM state is changed after Resume callback
         * -> possible to determine exited suspend level */
        pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
    }
#endif

    /* Handle suspend request */
    if ((usISTR & USB_ISTR_SUSP) != 0)
 8006c76:	8bfb      	ldrh	r3, [r7, #30]
 8006c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d024      	beq.n	8006cca <USB_vIRQHandler+0x33e>
    {
        USB_FLAG_CLEAR(pxUSB, SUSP);
 8006c80:	4a22      	ldr	r2, [pc, #136]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c82:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006c86:	f36f 23cb 	bfc	r3, #11, #1
 8006c8a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

        /* Force low-power mode in the macrocell */
        SET_BIT(USB->CNTR.w, USB_CNTR_FSUSP | USB_CNTR_LPMODE);
 8006c8e:	4b1f      	ldr	r3, [pc, #124]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4a1d      	ldr	r2, [pc, #116]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006c98:	f043 030c 	orr.w	r3, r3, #12
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

        if (USB_FLAG_STATUS(pxUSB, WKUP) == 0)
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ca8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <USB_vIRQHandler+0x33e>
        {
            /* Set the target Link State */
            pxUSB->LinkState = USB_LINK_STATE_SUSPEND;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <USB_vIRQHandler+0x33e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
        }
    }

    /* Handle Start Of Frame signal (if enabled) */
    if ((USB_REG_BIT(pxUSB,CNTR,SOFM) != 0) && ((usISTR & USB_ISTR_SOF) != 0))
 8006cca:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006cd0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d013      	beq.n	8006d02 <USB_vIRQHandler+0x376>
 8006cda:	8bfb      	ldrh	r3, [r7, #30]
 8006cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00e      	beq.n	8006d02 <USB_vIRQHandler+0x376>
    {
        USB_FLAG_CLEAR(pxUSB, SOF);
 8006ce4:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <USB_vIRQHandler+0x380>)
 8006ce6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006cea:	f36f 2349 	bfc	r3, #9, #1
 8006cee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
        XPD_SAFE_CALLBACK(pxUSB->Callbacks.SOF, pxUSB);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <USB_vIRQHandler+0x376>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
    }
}
 8006d02:	bf00      	nop
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40005c00 	.word	0x40005c00

08006d10 <USB_vAllocateEPs>:
 * @brief Configure EPnR assignment and packet memory allocation for all endpoints
 *        based on the handle's Endpoint setup.
 * @param pxUSB: pointer to the USB handle structure
 */
__weak void USB_vAllocateEPs(USB_HandleType * pxUSB)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b089      	sub	sp, #36	; 0x24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    XPD_ReturnType eResult = XPD_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	763b      	strb	r3, [r7, #24]
    USB_EndPointHandleType *pxEP, *pxEP2;
    uint32_t ulEpNum;
    uint16_t usPmaTail;
    uint8_t  ucRegId = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	767b      	strb	r3, [r7, #25]

    /* Init endpoints structures */
    for (ulEpNum = 0; ulEpNum < USBD_MAX_EP_COUNT; ulEpNum++)
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e03f      	b.n	8006da6 <USB_vAllocateEPs+0x96>
    {
        pxEP = &pxUSB->EP.OUT[ulEpNum];
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	330b      	adds	r3, #11
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4413      	add	r3, r2
 8006d30:	3304      	adds	r3, #4
 8006d32:	617b      	str	r3, [r7, #20]
        pxEP2 = &pxUSB->EP.IN[ulEpNum];
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	3303      	adds	r3, #3
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	60fb      	str	r3, [r7, #12]

        /* Only consider used EPs */
        if (pxEP->MaxPacketSize > 0)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	891b      	ldrh	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d021      	beq.n	8006d8e <USB_vAllocateEPs+0x7e>
        {
            pxEP->RegId = ucRegId++;
 8006d4a:	7e7b      	ldrb	r3, [r7, #25]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	767a      	strb	r2, [r7, #25]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	7353      	strb	r3, [r2, #13]

            if (pxEP2->MaxPacketSize > 0)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	891b      	ldrh	r3, [r3, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d021      	beq.n	8006da0 <USB_vAllocateEPs+0x90>
            {
                /* If IN-OUT endpoints with the same address and type
                 * are both single buffer, one EPnR can manage both */
                if (!USB_EP_DOUBLE_BUFFERED(pxEP) &&
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	7a9b      	ldrb	r3, [r3, #10]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d00e      	beq.n	8006d82 <USB_vAllocateEPs+0x72>
                    !USB_EP_DOUBLE_BUFFERED(pxEP2) &&
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	7a9b      	ldrb	r3, [r3, #10]
                if (!USB_EP_DOUBLE_BUFFERED(pxEP) &&
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d00a      	beq.n	8006d82 <USB_vAllocateEPs+0x72>
                    (pxEP->Type == pxEP2->Type))
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	7a9a      	ldrb	r2, [r3, #10]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	7a9b      	ldrb	r3, [r3, #10]
                    !USB_EP_DOUBLE_BUFFERED(pxEP2) &&
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d104      	bne.n	8006d82 <USB_vAllocateEPs+0x72>
                {
                    pxEP2->RegId = pxEP->RegId;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	7b5a      	ldrb	r2, [r3, #13]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	735a      	strb	r2, [r3, #13]
 8006d80:	e00e      	b.n	8006da0 <USB_vAllocateEPs+0x90>
                }
                else
                {
                    pxEP2->RegId = ucRegId++;
 8006d82:	7e7b      	ldrb	r3, [r7, #25]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	767a      	strb	r2, [r7, #25]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	7353      	strb	r3, [r2, #13]
 8006d8c:	e008      	b.n	8006da0 <USB_vAllocateEPs+0x90>
                }
            }
        }
        else if (pxEP2->MaxPacketSize > 0)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	891b      	ldrh	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <USB_vAllocateEPs+0x90>
        {
            pxEP2->RegId = ucRegId++;
 8006d96:	7e7b      	ldrb	r3, [r7, #25]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	767a      	strb	r2, [r7, #25]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	7353      	strb	r3, [r2, #13]
    for (ulEpNum = 0; ulEpNum < USBD_MAX_EP_COUNT; ulEpNum++)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	3301      	adds	r3, #1
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	2b07      	cmp	r3, #7
 8006daa:	d9bc      	bls.n	8006d26 <USB_vAllocateEPs+0x16>
        }
    }

    /* Ensure that endpoints can be fitted in EP regs */
    if (ucRegId < USBD_MAX_EP_COUNT)
 8006dac:	7e7b      	ldrb	r3, [r7, #25]
 8006dae:	2b07      	cmp	r3, #7
 8006db0:	f200 808f 	bhi.w	8006ed2 <USB_vAllocateEPs+0x1c2>
    {
        /* Reserve place for BTABLE */
        usPmaTail = ucRegId * sizeof(USB_BufferDescriptorType);
 8006db4:	7e7b      	ldrb	r3, [r7, #25]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	837b      	strh	r3, [r7, #26]

        /* EP0 is half-duplex, IN and OUT can share the memory */
        pxEP = &pxUSB->EP.IN[0];
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3334      	adds	r3, #52	; 0x34
 8006dc0:	617b      	str	r3, [r7, #20]
        USB_EP_BDT[pxEP->RegId].TX_ADDR = usPmaTail;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	7b5b      	ldrb	r3, [r3, #13]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006dcc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006dd0:	8b7a      	ldrh	r2, [r7, #26]
 8006dd2:	601a      	str	r2, [r3, #0]
        USB_EP_BDT[pxEP->RegId].RX_ADDR = usPmaTail;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	7b5b      	ldrb	r3, [r3, #13]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006dde:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006de2:	8b7a      	ldrh	r2, [r7, #26]
 8006de4:	609a      	str	r2, [r3, #8]
        usPmaTail += (pxEP->MaxPacketSize + 1) & (~1);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	891b      	ldrh	r3, [r3, #8]
 8006dea:	3301      	adds	r3, #1
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f023 0301 	bic.w	r3, r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	8b7b      	ldrh	r3, [r7, #26]
 8006df6:	4413      	add	r3, r2
 8006df8:	837b      	strh	r3, [r7, #26]

        /* Allocate packet memory for all endpoints (unused ones' MPS = 0) */
        for (ulEpNum = 1; ulEpNum < USBD_MAX_EP_COUNT; ulEpNum++)
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	e062      	b.n	8006ec6 <USB_vAllocateEPs+0x1b6>
        {
            pxEP = &pxUSB->EP.IN[ulEpNum];
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	3303      	adds	r3, #3
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4413      	add	r3, r2
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	617b      	str	r3, [r7, #20]
            if (pxEP->MaxPacketSize > 0)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	891b      	ldrh	r3, [r3, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d024      	beq.n	8006e60 <USB_vAllocateEPs+0x150>
            {
                /* The PMA allocation must be 16 bit aligned */
                uint16_t usMPS = (pxEP->MaxPacketSize + 1) & (~1);
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	891b      	ldrh	r3, [r3, #8]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	827b      	strh	r3, [r7, #18]

                /* Set TX_ADDR or RX_ADDR depending on direction */
                USB_EP_BDT[pxEP->RegId].TX_ADDR = usPmaTail;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	7b5b      	ldrb	r3, [r3, #13]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e2e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006e32:	8b7a      	ldrh	r2, [r7, #26]
 8006e34:	601a      	str	r2, [r3, #0]
                usPmaTail += usMPS;
 8006e36:	8b7a      	ldrh	r2, [r7, #26]
 8006e38:	8a7b      	ldrh	r3, [r7, #18]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	837b      	strh	r3, [r7, #26]

                /* Allocate double buffer */
                if (USB_EP_DOUBLE_BUFFERED(pxEP))
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	7a9b      	ldrb	r3, [r3, #10]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d10c      	bne.n	8006e60 <USB_vAllocateEPs+0x150>
                {
                    /* Set RX_ADDR or TX_ADDR as well */
                    USB_EP_BDT[pxEP->RegId].RX_ADDR = usPmaTail;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	7b5b      	ldrb	r3, [r3, #13]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e50:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006e54:	8b7a      	ldrh	r2, [r7, #26]
 8006e56:	609a      	str	r2, [r3, #8]
                    usPmaTail += usMPS;
 8006e58:	8b7a      	ldrh	r2, [r7, #26]
 8006e5a:	8a7b      	ldrh	r3, [r7, #18]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	837b      	strh	r3, [r7, #26]
                }
            }

            pxEP = &pxUSB->EP.OUT[ulEpNum];
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	330b      	adds	r3, #11
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4413      	add	r3, r2
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	617b      	str	r3, [r7, #20]
            if (pxEP->MaxPacketSize > 0)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	891b      	ldrh	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d024      	beq.n	8006ec0 <USB_vAllocateEPs+0x1b0>
            {
                /* The PMA allocation must be 16 bit aligned */
                uint16_t usMPS = (pxEP->MaxPacketSize + 1) & (~1);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	891b      	ldrh	r3, [r3, #8]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	823b      	strh	r3, [r7, #16]

                /* Set TX_ADDR or RX_ADDR depending on direction */
                USB_EP_BDT[pxEP->RegId].RX_ADDR = usPmaTail;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	7b5b      	ldrb	r3, [r3, #13]
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006e92:	8b7a      	ldrh	r2, [r7, #26]
 8006e94:	609a      	str	r2, [r3, #8]
                usPmaTail += usMPS;
 8006e96:	8b7a      	ldrh	r2, [r7, #26]
 8006e98:	8a3b      	ldrh	r3, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	837b      	strh	r3, [r7, #26]

                /* Allocate double buffer */
                if (USB_EP_DOUBLE_BUFFERED(pxEP))
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	7a9b      	ldrb	r3, [r3, #10]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d10c      	bne.n	8006ec0 <USB_vAllocateEPs+0x1b0>
                {
                    /* Set RX_ADDR or TX_ADDR as well */
                    USB_EP_BDT[pxEP->RegId].TX_ADDR = usPmaTail;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	7b5b      	ldrb	r3, [r3, #13]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006eb0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006eb4:	8b7a      	ldrh	r2, [r7, #26]
 8006eb6:	601a      	str	r2, [r3, #0]
                    usPmaTail += usMPS;
 8006eb8:	8b7a      	ldrh	r2, [r7, #26]
 8006eba:	8a3b      	ldrh	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	837b      	strh	r3, [r7, #26]
        for (ulEpNum = 1; ulEpNum < USBD_MAX_EP_COUNT; ulEpNum++)
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2b07      	cmp	r3, #7
 8006eca:	d999      	bls.n	8006e00 <USB_vAllocateEPs+0xf0>
        /* TODO: usPmaTail shall not exceed 1024 (or 768 if CAN is enabled) */
#else
        /* TODO: usPmaTail shall not exceed 512 */
#endif
        {
            eResult = XPD_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	763b      	strb	r3, [r7, #24]
         * by the peripheral, return error */
        eResult = XPD_ERROR;
    }

    (void) eResult;
}
 8006ed0:	e001      	b.n	8006ed6 <USB_vAllocateEPs+0x1c6>
        eResult = XPD_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	763b      	strb	r3, [r7, #24]
}
 8006ed6:	bf00      	nop
 8006ed8:	3724      	adds	r7, #36	; 0x24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	4d0c      	ldr	r5, [pc, #48]	; (8006f18 <__libc_init_array+0x38>)
 8006ee6:	4c0d      	ldr	r4, [pc, #52]	; (8006f1c <__libc_init_array+0x3c>)
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	42a6      	cmp	r6, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	f000 f822 	bl	8006f38 <_init>
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4d0a      	ldr	r5, [pc, #40]	; (8006f20 <__libc_init_array+0x40>)
 8006ef8:	4c0a      	ldr	r4, [pc, #40]	; (8006f24 <__libc_init_array+0x44>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	42a6      	cmp	r6, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f08:	4798      	blx	r3
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f12:	4798      	blx	r3
 8006f14:	3601      	adds	r6, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	08007064 	.word	0x08007064
 8006f1c:	08007064 	.word	0x08007064
 8006f20:	08007064 	.word	0x08007064
 8006f24:	08007068 	.word	0x08007068

08006f28 <memset>:
 8006f28:	4603      	mov	r3, r0
 8006f2a:	4402      	add	r2, r0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memset+0xa>
 8006f30:	4770      	bx	lr
 8006f32:	f803 1b01 	strb.w	r1, [r3], #1
 8006f36:	e7f9      	b.n	8006f2c <memset+0x4>

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
